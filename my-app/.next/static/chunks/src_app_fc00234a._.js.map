{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/dashboard-doctor/Header.tsx"],"sourcesContent":["import React from 'react';\r\nimport { UserCircleIcon, LogOutIcon } from 'lucide-react';\r\nimport { useAuth } from '../context/AuthContext';\r\nexport const Header = () => {\r\n  const {\r\n    user,\r\n    logout\r\n  } = useAuth();\r\n  const handleLogout = () => {\r\n    logout();\r\n  };\r\n  return <header className=\"bg-white shadow-sm border-b border-gray-200\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"flex-shrink-0\">\r\n              <h1 className=\"text-xl font-bold text-blue-600\">MediClinic</h1>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className=\"hidden md:flex items-center text-sm text-gray-800\">\r\n              <span className=\"font-bold text-gray-900\">{user?.fullName || user?.username}</span>\r\n              <span className=\"mx-2 text-gray-600\">|</span>\r\n              <span>{user?.specialization || user?.role}</span>\r\n            </div>\r\n            <div className=\"flex items-center\">\r\n              {/* <button className=\"p-1 rounded-full text-gray-600 hover:text-blue-600 focus:outline-none\">\r\n                <UserCircleIcon className=\"h-8 w-8\" />\r\n              </button> */}\r\n              <button onClick={handleLogout} className=\"ml-2 p-1 rounded-full text-gray-600 hover:text-red-600 focus:outline-none flex items-center cursor-pointer\">\r\n                <LogOutIcon className=\"h-5 w-5\" />\r\n                <span className=\"ml-1 text-sm hidden sm:inline\">Đăng xuất</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>;\r\n};"],"names":[],"mappings":";;;;AACA;AACA;;;;;AACO,MAAM,SAAS;;IACpB,MAAM,EACJ,IAAI,EACJ,MAAM,EACP,GAAG,CAAA,GAAA,wIAAA,CAAA,UAAO,AAAD;IACV,MAAM,eAAe;QACnB;IACF;IACA,qBAAO,6LAAC;QAAO,WAAU;kBACrB,cAAA,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAG,WAAU;0CAAkC;;;;;;;;;;;;;;;;kCAGpD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAK,WAAU;kDAA2B,MAAM,YAAY,MAAM;;;;;;kDACnE,6LAAC;wCAAK,WAAU;kDAAqB;;;;;;kDACrC,6LAAC;kDAAM,MAAM,kBAAkB,MAAM;;;;;;;;;;;;0CAEvC,6LAAC;gCAAI,WAAU;0CAIb,cAAA,6LAAC;oCAAO,SAAS;oCAAc,WAAU;;sDACvC,6LAAC,iNAAA,CAAA,aAAU;4CAAC,WAAU;;;;;;sDACtB,6LAAC;4CAAK,WAAU;sDAAgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOhE;GAnCa;;QAIP,wIAAA,CAAA,UAAO;;;KAJA","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/dashboard-doctor/PatientCard.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ClockIcon, PhoneIcon } from 'lucide-react';\r\nimport { User } from '../datats/mockPatients';\r\n\r\n// Interface cho thông tin bệnh nhân trong hàng đợi\r\ninterface PatientInQueue {\r\n  _id: string;\r\n  patient: string;\r\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled';\r\n  doctorId?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  __v?: number;\r\n  patientInfo: User | null;\r\n}\r\n\r\ninterface PatientCardProps {\r\n  patientInQueue: PatientInQueue;\r\n  isSelected: boolean;\r\n  onSelect: () => void;\r\n}\r\n\r\nexport const PatientCard: React.FC<PatientCardProps> = ({\r\n  patientInQueue,\r\n  isSelected,\r\n  onSelect\r\n}) => {\r\n  // Lấy thông tin người dùng từ patientInQueue\r\n  const patient = patientInQueue.patientInfo;\r\n  \r\n  if (!patient) {\r\n    return null; // Không hiển thị nếu không có thông tin người dùng\r\n  }\r\n  \r\n  const [waitingTime, setWaitingTime] = useState(() => \r\n    Math.floor((new Date().getTime() - new Date(patientInQueue.createdAt).getTime()) / 60000)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setWaitingTime(Math.floor((new Date().getTime() - new Date(patientInQueue.createdAt).getTime()) / 60000));\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [patientInQueue.createdAt]);\r\n\r\n  const formatPhoneNumber = (phone: string) => {\r\n    if (phone.startsWith('+84')) {\r\n      return phone.replace(/(\\+84)(\\d{3})(\\d{3})(\\d{3})/, '$1 $2 $3 $4');\r\n    }\r\n    return phone.replace(/(\\d{4})(\\d{3})(\\d{3})/, '$1 $2 $3');\r\n  };\r\n\r\n  return <div className={`p-4 cursor-pointer transition-colors ${isSelected ? 'bg-blue-50 border-l-4 border-blue-500' : 'hover:bg-gray-50'}`} onClick={onSelect}>\r\n      <div className=\"flex justify-between items-start\">\r\n        <div className=\"flex-1\">\r\n          <h3 className=\"text-base font-semibold text-gray-900\">{patient.fullName}</h3>\r\n          {/* Trong User mockPatients không có age và gender nên hiển thị thông tin có sẵn */}\r\n          <p className=\"text-sm text-gray-800\">\r\n            {patient.role} • {new Date(patientInQueue.createdAt).toLocaleDateString()}\r\n          </p>\r\n          <div className=\"flex items-center text-sm text-gray-800 mt-1\">\r\n            <PhoneIcon className=\"h-3 w-3 mr-1\" />\r\n            {formatPhoneNumber(patient.phone)}\r\n          </div>\r\n          <p className=\"text-sm text-gray-800 mt-1\">{patient.email}</p>\r\n        </div>\r\n        <div className=\"flex flex-col items-end\">\r\n          <div className=\"flex items-center mt-1 text-sm text-gray-900 font-medium\">\r\n            <ClockIcon className=\"h-4 w-4 mr-1\" />\r\n            <span>Đợi: {waitingTime} phút</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>;\r\n};"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;;;AAHA;;;AAwBO,MAAM,cAA0C,CAAC,EACtD,cAAc,EACd,UAAU,EACV,QAAQ,EACT;;IACC,6CAA6C;IAC7C,MAAM,UAAU,eAAe,WAAW;IAE1C,IAAI,CAAC,SAAS;QACZ,OAAO,MAAM,mDAAmD;IAClE;IAEA,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD;gCAAE,IAC7C,KAAK,KAAK,CAAC,CAAC,IAAI,OAAO,OAAO,KAAK,IAAI,KAAK,eAAe,SAAS,EAAE,OAAO,EAAE,IAAI;;IAGrF,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACR,MAAM,WAAW;kDAAY;oBAC3B,eAAe,KAAK,KAAK,CAAC,CAAC,IAAI,OAAO,OAAO,KAAK,IAAI,KAAK,eAAe,SAAS,EAAE,OAAO,EAAE,IAAI;gBACpG;iDAAG;YACH;yCAAO,IAAM,cAAc;;QAC7B;gCAAG;QAAC,eAAe,SAAS;KAAC;IAE7B,MAAM,oBAAoB,CAAC;QACzB,IAAI,MAAM,UAAU,CAAC,QAAQ;YAC3B,OAAO,MAAM,OAAO,CAAC,+BAA+B;QACtD;QACA,OAAO,MAAM,OAAO,CAAC,yBAAyB;IAChD;IAEA,qBAAO,6LAAC;QAAI,WAAW,CAAC,qCAAqC,EAAE,aAAa,0CAA0C,oBAAoB;QAAE,SAAS;kBACjJ,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAAyC,QAAQ,QAAQ;;;;;;sCAEvE,6LAAC;4BAAE,WAAU;;gCACV,QAAQ,IAAI;gCAAC;gCAAI,IAAI,KAAK,eAAe,SAAS,EAAE,kBAAkB;;;;;;;sCAEzE,6LAAC;4BAAI,WAAU;;8CACb,6LAAC,2MAAA,CAAA,YAAS;oCAAC,WAAU;;;;;;gCACpB,kBAAkB,QAAQ,KAAK;;;;;;;sCAElC,6LAAC;4BAAE,WAAU;sCAA8B,QAAQ,KAAK;;;;;;;;;;;;8BAE1D,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,2MAAA,CAAA,YAAS;gCAAC,WAAU;;;;;;0CACrB,6LAAC;;oCAAK;oCAAM;oCAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKpC;GApDa;KAAA","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/dashboard-doctor/PatientList.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React from 'react';\r\nimport { PatientCard } from './PatientCard';\r\nimport { User } from '../datats/mockPatients';\r\n\r\n// Interface cho thông tin bệnh nhân trong hàng đợi\r\ninterface PatientInQueue {\r\n  _id: string; // ID của queue\r\n  patient: string; // ID của bệnh nhân\r\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled';\r\n  doctorId?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  __v?: number;\r\n  patientInfo: User | null;\r\n}\r\n\r\ninterface PatientListProps {\r\n  patients: PatientInQueue[];\r\n  onSelectPatient: (patient: PatientInQueue) => void;\r\n  selectedPatientId?: string;\r\n}\r\n\r\nexport const PatientList: React.FC<PatientListProps> = ({\r\n  patients,\r\n  onSelectPatient,\r\n  selectedPatientId\r\n}) => {\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md h-full\">\r\n      <div className=\"p-4 border-b border-gray-200 flex items-center justify-between\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900\">Danh sách bệnh nhân</h2>\r\n      </div>\r\n      <div className=\"p-4 overflow-y-auto\" style={{ maxHeight: 'calc(100vh - 200px)' }}>\r\n        {patients.length === 0 ? (\r\n          <div className=\"text-center text-gray-700 text-sm\">Không có bệnh nhân trong danh sách chờ.</div>\r\n        ) : (\r\n          <div className=\"space-y-2\">\r\n            {patients.map((patient, idx) => (\r\n              <div key={patient._id} className={idx === 0 ? '' : 'opacity-50 pointer-events-none'}>\r\n                <PatientCard\r\n                  patientInQueue={patient}\r\n                  isSelected={selectedPatientId === patient._id}\r\n                  onSelect={() => idx === 0 && onSelectPatient(patient)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAwBO,MAAM,cAA0C,CAAC,EACtD,QAAQ,EACR,eAAe,EACf,iBAAiB,EAClB;IACC,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAG,WAAU;8BAAsC;;;;;;;;;;;0BAEtD,6LAAC;gBAAI,WAAU;gBAAsB,OAAO;oBAAE,WAAW;gBAAsB;0BAC5E,SAAS,MAAM,KAAK,kBACnB,6LAAC;oBAAI,WAAU;8BAAoC;;;;;yCAEnD,6LAAC;oBAAI,WAAU;8BACZ,SAAS,GAAG,CAAC,CAAC,SAAS,oBACtB,6LAAC;4BAAsB,WAAW,QAAQ,IAAI,KAAK;sCACjD,cAAA,6LAAC,oJAAA,CAAA,cAAW;gCACV,gBAAgB;gCAChB,YAAY,sBAAsB,QAAQ,GAAG;gCAC7C,UAAU,IAAM,QAAQ,KAAK,gBAAgB;;;;;;2BAJvC,QAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;AAanC;KA7Ba","debugId":null}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/datats/mockPatients.ts"],"sourcesContent":["// Dữ liệu được fetched từ API thay vì dùng static data\r\nimport axiosInstance from '../services/axios.customize.service';\r\n\r\n// Khai báo các interface\r\nexport interface User {\r\n  _id: string;\r\n  userId: string;\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  fullName: string;\r\n  phone: string;\r\n  role: 'PATIENT' | 'DOCTOR' | 'PHARMACIST' | 'RECEPTIONIST' | 'ADMIN';\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  __v: number;\r\n}\r\n\r\nexport interface Queue {\r\n  _id: string;\r\n  patient: string; // ObjectId của bệnh nhân\r\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled';\r\n  doctorId?: string; // ObjectId của bác sĩ được chỉ định (nếu có)\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  __v: number;\r\n}\r\n\r\nexport interface Prescription {\r\n  _id: string;\r\n  customPrescriptionId: string;\r\n  patientId: string; // ObjectId\r\n  doctorId: string; // ObjectId\r\n  diagnosis: string;\r\n  date: string;\r\n  status: 'PENDING_DISPENSE' | 'DISPENSED' | 'CANCELED';\r\n  __v: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface PrescriptionDetail {\r\n  _id: string;\r\n  customPrescriptionDetailId: string;\r\n  prescriptionId: string; // ObjectId\r\n  medicineId: string; // ObjectId\r\n  quantity: number;\r\n  dosage: string;\r\n  __v: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Medicine {\r\n  _id: string;\r\n  customMedicineId: string;\r\n  name: string;\r\n  totalPills: number;\r\n  price: number;\r\n  __v: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Invoice {\r\n  _id: string;\r\n  prescriptionId: string; // ObjectId\r\n  patientId: string; // ObjectId\r\n  totalAmount: number;\r\n  status: 'PAID' | 'UNPAID';\r\n  __v: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\n// Biến cache để lưu trữ dữ liệu từ API\r\nexport let mockUsers: User[] = [];\r\nexport let mockQueues: Queue[] = [];\r\nexport let mockMedicines: Medicine[] = [];\r\nexport let mockPrescriptions: Prescription[] = [];\r\nexport let mockPrescriptionDetails: PrescriptionDetail[] = [];\r\nexport let mockInvoices: Invoice[] = [];\r\n\r\n// Biến toàn cục để lưu token xác thực\r\nlet authToken: string | null = null;\r\n\r\n// Hàm thiết lập token khi người dùng đăng nhập\r\nexport const setAuthToken = (token: string) => {\r\n  authToken = token;\r\n  if (typeof window !== 'undefined') { // Kiểm tra nếu đang chạy trên browser\r\n    localStorage.setItem('authToken', token); // Lưu token vào localStorage để giữ qua refresh\r\n  }\r\n};\r\n\r\n// Hàm để lấy token hiện tại\r\nexport const getAuthToken = () => {\r\n  // Nếu không có token trong memory, thử lấy từ localStorage\r\n  if (!authToken && typeof window !== 'undefined') {\r\n    authToken = localStorage.getItem('authToken');\r\n  }\r\n  return authToken;\r\n};\r\n\r\n// Helper function để thực hiện API call có xác thực\r\nconst authenticatedGet = async (endpoint: string) => {\r\n  try {\r\n    // Lấy token từ localStorage hoặc cookies\r\n    let token = getAuthToken();\r\n    \r\n    // Thử lấy token từ cookies nếu không tìm thấy trong localStorage\r\n    if (!token && typeof document !== 'undefined') {\r\n      // Check browser cookies if localStorage doesn't have the token\r\n      const cookies = document.cookie.split(';');\r\n      const tokenCookie = cookies.find(c => c.trim().startsWith('token='));\r\n      if (tokenCookie) {\r\n        token = tokenCookie.split('=')[1];\r\n        console.log(\"Found token in cookies, using it for API calls\");\r\n        // Lưu lại vào authToken để sử dụng cho các lần sau\r\n        setAuthToken(token);\r\n      }\r\n    }\r\n    \r\n    if (!token) {\r\n      console.warn('No authentication token available for API call to:', endpoint);\r\n      console.warn('Please login first or check token storage.');\r\n      return null;\r\n    }\r\n\r\n    console.log(`Making authenticated request to ${endpoint}`);\r\n    console.log(`Using token (first 10 chars): ${token.substring(0, 10)}...`);\r\n\r\n    const response = await axiosInstance.get(endpoint, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    \r\n    console.log(`Successful response from ${endpoint}:`, response.status);\r\n    if (Array.isArray(response.data)) {\r\n      console.log(`Got ${response.data.length} items from ${endpoint}`);\r\n    } else {\r\n      console.log(`Got data from ${endpoint}:`, response.data ? 'Object returned' : 'Empty response');\r\n    }\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(`Error fetching from ${endpoint}:`, error.message);\r\n    \r\n    // Log more detailed error info\r\n    if (error.response) {\r\n      console.error('Response status:', error.response.status);\r\n      console.error('Response data:', error.response.data);\r\n      \r\n      if (error.response.status === 403) {\r\n        console.error(`Access forbidden to ${endpoint} - check user permissions`);\r\n      } else if (error.response.status === 401) {\r\n        console.error(`Unauthorized access to ${endpoint} - token may be expired`);\r\n        // Thử xóa token để người dùng phải đăng nhập lại\r\n        if (typeof window !== 'undefined') {\r\n          localStorage.removeItem('authToken');\r\n          document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\r\n          authToken = null;\r\n        }\r\n      }\r\n    } else if (error.request) {\r\n      console.error('No response received from request. Server may be down.');\r\n    } else {\r\n      console.error('Error setting up request:', error.message);\r\n    }\r\n    \r\n    return null;\r\n  }\r\n};\r\n\r\n// ============= FETCH DATA FUNCTIONS =============\r\n\r\n// Load users từ API\r\nexport const fetchUsers = async () => {\r\n  console.log('Fetching users from API...');\r\n  \r\n  // Đầu tiên thử lấy thông tin user hiện tại để biết role\r\n  try {\r\n    const currentUser = await authenticatedGet('/users/me');\r\n    \r\n    if (currentUser) {\r\n      console.log(`Current user role: ${currentUser.role}`);\r\n      \r\n      if (currentUser.role === 'ADMIN') {\r\n        // Nếu là ADMIN, có quyền lấy tất cả users\r\n        console.log('User is ADMIN, trying to fetch all users');\r\n        const data = await authenticatedGet('/users');\r\n        \r\n        if (data && Array.isArray(data)) {\r\n          console.log(`Successfully fetched ${data.length} users from API`);\r\n          mockUsers = data;\r\n          return data;\r\n        }\r\n      } \r\n      \r\n      // Dù là role nào, thử dùng endpoint mới để lấy danh sách bệnh nhân\r\n      if (['ADMIN', 'DOCTOR', 'PHARMACIST', 'RECEPTIONIST'].includes(currentUser.role)) {\r\n        console.log(`Trying to fetch patients using /users/patients endpoint for ${currentUser.role}`);\r\n        const patients = await authenticatedGet('/users/patients');\r\n        \r\n        if (patients && Array.isArray(patients)) {\r\n          console.log(`Successfully fetched ${patients.length} patients from API`);\r\n          \r\n          // Kết hợp với dữ liệu hiện có (nếu có)\r\n          // Giữ lại các user không phải bệnh nhân từ danh sách hiện có (nếu có)\r\n          const nonPatients = mockUsers.filter(user => user.role !== 'PATIENT');\r\n          mockUsers = [...nonPatients, ...patients];\r\n          \r\n          console.log(`Combined user data: ${mockUsers.length} users (${nonPatients.length} non-patients + ${patients.length} patients)`);\r\n          return mockUsers;\r\n        }\r\n      }\r\n      \r\n      // Nếu không thể lấy dữ liệu, giữ nguyên dữ liệu mockUsers hiện tại\r\n      console.log(`Using existing mock data with ${mockUsers.length} users`);\r\n      return [...mockUsers];\r\n    } else {\r\n      console.error('Could not fetch current user info, authentication may be invalid');\r\n      return mockUsers;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in fetchUsers:', error);\r\n    return mockUsers;\r\n  }\r\n};\r\n\r\n// Load queues từ API\r\nexport const fetchQueues = async () => {\r\n  const data = await authenticatedGet('/queues');\r\n  if (data && Array.isArray(data)) {\r\n    mockQueues = data;\r\n    return data;\r\n  }\r\n  return [];\r\n};\r\n\r\n// Load medicines từ API\r\nexport const fetchMedicines = async () => {\r\n  const data = await authenticatedGet('/medicines');\r\n  if (data && Array.isArray(data)) {\r\n    mockMedicines = data;\r\n    return data;\r\n  }\r\n  return [];\r\n};\r\n\r\n// Load prescriptions từ API\r\nexport const fetchPrescriptions = async () => {\r\n  const data = await authenticatedGet('/prescriptions');\r\n  if (data && Array.isArray(data)) {\r\n    mockPrescriptions = data;\r\n    return data;\r\n  }\r\n  return [];\r\n};\r\n\r\n// Load prescription details từ API\r\nexport const fetchPrescriptionDetails = async () => {\r\n  const data = await authenticatedGet('/prescription-details');\r\n  if (data && Array.isArray(data)) {\r\n    mockPrescriptionDetails = data;\r\n    return data;\r\n  }\r\n  return [];\r\n};\r\n\r\n// Load invoices từ API\r\nexport const fetchInvoices = async () => {\r\n  const data = await authenticatedGet('/invoices');\r\n  if (data && Array.isArray(data)) {\r\n    mockInvoices = data;\r\n    return data;\r\n  }\r\n  return [];\r\n};\r\n\r\n// Initialize all data (call when app starts)\r\nexport const initializeData = async () => {\r\n  console.log('Initializing data from API or mock sources...');\r\n  \r\n  try {\r\n    // Check if we have a valid token first\r\n    const token = getAuthToken();\r\n    if (!token) {\r\n      console.warn('No authentication token found, will use existing mock data');\r\n      return false;\r\n    }\r\n    \r\n    // Try to validate token\r\n    try {\r\n      console.log('Validating token before fetching data...');\r\n      const currentUser = await authenticatedGet('/users/me');\r\n      if (!currentUser) {\r\n        console.error('Token validation failed, cannot fetch data');\r\n        return false;\r\n      }\r\n      console.log(`Token valid, logged in as ${currentUser.username} (${currentUser.role})`);\r\n    } catch (error) {\r\n      console.error('Error validating token:', error);\r\n      return false;\r\n    }\r\n    \r\n    // Initialize with separate try/catch for each resource type\r\n    // This allows some data to load even if others fail\r\n    const results = {\r\n      users: false,\r\n      queues: false,\r\n      medicines: false,\r\n      prescriptions: false,\r\n      prescriptionDetails: false,\r\n      invoices: false\r\n    };\r\n    \r\n    try {\r\n      await fetchUsers();\r\n      results.users = true;\r\n      console.log(`Users loaded: ${mockUsers.length} items`);\r\n    } catch (error) {\r\n      console.error('Error loading users:', error);\r\n    }\r\n    \r\n    try {\r\n      await fetchQueues();\r\n      results.queues = true;\r\n      console.log(`Queues loaded: ${mockQueues.length} items`);\r\n    } catch (error) {\r\n      console.error('Error loading queues:', error);\r\n    }\r\n    \r\n    try {\r\n      await fetchMedicines();\r\n      results.medicines = true;\r\n      console.log(`Medicines loaded: ${mockMedicines.length} items`);\r\n    } catch (error) {\r\n      console.error('Error loading medicines:', error);\r\n    }\r\n    \r\n    try {\r\n      await fetchPrescriptions();\r\n      results.prescriptions = true;\r\n      console.log(`Prescriptions loaded: ${mockPrescriptions.length} items`);\r\n    } catch (error) {\r\n      console.error('Error loading prescriptions:', error);\r\n    }\r\n    \r\n    try {\r\n      await fetchPrescriptionDetails();\r\n      results.prescriptionDetails = true;\r\n      console.log(`Prescription details loaded: ${mockPrescriptionDetails.length} items`);\r\n    } catch (error) {\r\n      console.error('Error loading prescription details:', error);\r\n    }\r\n    \r\n    try {\r\n      await fetchInvoices();\r\n      results.invoices = true;\r\n      console.log(`Invoices loaded: ${mockInvoices.length} items`);\r\n    } catch (error) {\r\n      console.error('Error loading invoices:', error);\r\n    }\r\n    \r\n    const successCount = Object.values(results).filter(Boolean).length;\r\n    console.log(`Data initialization complete: ${successCount}/6 resource types loaded successfully`);\r\n    \r\n    return successCount > 0;\r\n  } catch (error) {\r\n    console.error('Error in data initialization:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// ============= USER-RELATED FUNCTIONS =============\r\n\r\nexport const getAllUsers = async () => {\r\n  if (mockUsers.length === 0) {\r\n    await fetchUsers();\r\n  }\r\n  return [...mockUsers];\r\n};\r\n\r\nexport const getUserById = async (id: string) => {\r\n  if (mockUsers.length === 0) {\r\n    await fetchUsers();\r\n  }\r\n  return mockUsers.find(user => user._id === id);\r\n};\r\n\r\nexport const getUsersByRole = async (role: string) => {\r\n  if (mockUsers.length === 0) {\r\n    await fetchUsers();\r\n  }\r\n  return mockUsers.filter(user => user.role === role);\r\n};\r\n\r\nexport const searchUsers = async (searchTerm: string) => {\r\n  if (mockUsers.length === 0) {\r\n    await fetchUsers();\r\n  }\r\n  const term = searchTerm.toLowerCase();\r\n  return mockUsers.filter(user => \r\n    user.fullName.toLowerCase().includes(term) || \r\n    user.username.toLowerCase().includes(term) ||\r\n    user.email.toLowerCase().includes(term) ||\r\n    user.phone.includes(term) ||\r\n    user.userId.includes(term)\r\n  );\r\n};\r\n\r\n// ============= QUEUE-RELATED FUNCTIONS =============\r\n\r\nexport const getAllQueues = async () => {\r\n  if (mockQueues.length === 0) {\r\n    await fetchQueues();\r\n  }\r\n  return [...mockQueues];\r\n};\r\n\r\nexport const getQueuesByStatus = async (status: string) => {\r\n  if (mockQueues.length === 0) {\r\n    await fetchQueues();\r\n  }\r\n  return mockQueues.filter(queue => queue.status === status);\r\n};\r\n\r\nexport const getQueueByPatientId = async (patientId: string) => {\r\n  if (mockQueues.length === 0) {\r\n    await fetchQueues();\r\n  }\r\n  return mockQueues.find(queue => queue.patient === patientId);\r\n};\r\n\r\nexport const addQueue = async (patientId: string, status: 'waiting' | 'in_progress' | 'completed' | 'canceled' = 'waiting') => {\r\n  // Kiểm tra xem patientId có tồn tại và là bệnh nhân không\r\n  const patient = await getUserById(patientId);\r\n  if (!patient || patient.role !== 'PATIENT') {\r\n    console.error('Invalid patient ID or user is not a patient');\r\n    return null;\r\n  }\r\n\r\n  // Kiểm tra xem bệnh nhân đã có trong queue chưa\r\n  const existingQueue = await getQueueByPatientId(patientId);\r\n  if (existingQueue) {\r\n    console.warn('Patient already in queue');\r\n    return existingQueue;\r\n  }\r\n\r\n  // Tạo queue mới\r\n  const newQueue: Queue = {\r\n    _id: generateMongoId(),\r\n    patient: patientId,\r\n    status: status,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    __v: 0\r\n  };\r\n\r\n  // Gọi API để tạo queue thực sự qua API\r\n  try {\r\n    // Đây là phần sẽ gọi API thực tế\r\n    // const response = await axiosInstance.post('/queues', newQueue, {\r\n    //   headers: { Authorization: `Bearer ${getAuthToken()}` }\r\n    // });\r\n    // if (response.data) {\r\n    //   mockQueues.push(response.data);\r\n    //   return response.data;\r\n    // }\r\n    \r\n    // Hiện tại, chúng ta chỉ thêm vào cache\r\n    mockQueues.push(newQueue);\r\n    return newQueue;\r\n  } catch (error) {\r\n    console.error('Error creating queue:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const updateQueueStatus = async (\r\n  queueId: string, \r\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled', \r\n  doctorId?: string\r\n) => {\r\n  if (mockQueues.length === 0) {\r\n    await fetchQueues();\r\n  }\r\n  \r\n  const index = mockQueues.findIndex(queue => queue._id === queueId);\r\n  if (index !== -1) {\r\n    const updatedQueue = {\r\n      ...mockQueues[index],\r\n      status: status,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    if (doctorId && status === 'in_progress') {\r\n      updatedQueue.doctorId = doctorId;\r\n    }\r\n    \r\n    // Thực tế sẽ gọi API để cập nhật queue\r\n    // const response = await axiosInstance.put(`/queues/${queueId}`, updatedQueue, {\r\n    //   headers: { Authorization: `Bearer ${getAuthToken()}` }\r\n    // });\r\n    \r\n    // Hiện tại chỉ cập nhật trong cache\r\n    mockQueues[index] = updatedQueue;\r\n    return mockQueues[index];\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const deleteQueue = async (queueId: string) => {\r\n  if (mockQueues.length === 0) {\r\n    await fetchQueues();\r\n  }\r\n  \r\n  const index = mockQueues.findIndex(queue => queue._id === queueId);\r\n  if (index !== -1) {\r\n    const deletedQueue = mockQueues[index];\r\n    \r\n    // Thực tế sẽ gọi API để xóa queue\r\n    // await axiosInstance.delete(`/queues/${queueId}`, {\r\n    //   headers: { Authorization: `Bearer ${getAuthToken()}` }\r\n    // });\r\n    \r\n    // Hiện tại chỉ xóa trong cache\r\n    mockQueues.splice(index, 1);\r\n    return deletedQueue;\r\n  }\r\n  return null;\r\n};\r\n\r\n// ============= MEDICINE-RELATED FUNCTIONS =============\r\n\r\nexport const getAllMedicines = async () => {\r\n  if (mockMedicines.length === 0) {\r\n    await fetchMedicines();\r\n  }\r\n  return [...mockMedicines];\r\n};\r\n\r\nexport const getMedicineById = async (id: string) => {\r\n  if (mockMedicines.length === 0) {\r\n    await fetchMedicines();\r\n  }\r\n  return mockMedicines.find(medicine => medicine._id === id);\r\n};\r\n\r\nexport const searchMedicines = async (searchTerm: string) => {\r\n  if (mockMedicines.length === 0) {\r\n    await fetchMedicines();\r\n  }\r\n  const term = searchTerm.toLowerCase();\r\n  return mockMedicines.filter(medicine => \r\n    medicine.name.toLowerCase().includes(term) || \r\n    medicine.customMedicineId.toLowerCase().includes(term)\r\n  );\r\n};\r\n\r\n// ============= PRESCRIPTION-RELATED FUNCTIONS =============\r\n\r\nexport const getAllPrescriptions = async () => {\r\n  if (mockPrescriptions.length === 0) {\r\n    await fetchPrescriptions();\r\n  }\r\n  return [...mockPrescriptions];\r\n};\r\n\r\nexport const getPrescriptionById = async (id: string) => {\r\n  if (mockPrescriptions.length === 0) {\r\n    await fetchPrescriptions();\r\n  }\r\n  return mockPrescriptions.find(prescription => prescription._id === id);\r\n};\r\n\r\nexport const getPrescriptionsByPatientId = async (patientId: string) => {\r\n  if (mockPrescriptions.length === 0) {\r\n    await fetchPrescriptions();\r\n  }\r\n  return mockPrescriptions.filter(prescription => prescription.patientId === patientId);\r\n};\r\n\r\nexport const getPrescriptionsByDoctorId = async (doctorId: string) => {\r\n  if (mockPrescriptions.length === 0) {\r\n    await fetchPrescriptions();\r\n  }\r\n  return mockPrescriptions.filter(prescription => prescription.doctorId === doctorId);\r\n};\r\n\r\nexport const getPrescriptionsByStatus = async (status: string) => {\r\n  if (mockPrescriptions.length === 0) {\r\n    await fetchPrescriptions();\r\n  }\r\n  return mockPrescriptions.filter(prescription => prescription.status === status);\r\n};\r\n\r\n// ============= PRESCRIPTION DETAIL-RELATED FUNCTIONS =============\r\n\r\nexport const getAllPrescriptionDetails = async () => {\r\n  if (mockPrescriptionDetails.length === 0) {\r\n    await fetchPrescriptionDetails();\r\n  }\r\n  return [...mockPrescriptionDetails];\r\n};\r\n\r\nexport const getPrescriptionDetailsByPrescriptionId = async (prescriptionId: string) => {\r\n  if (mockPrescriptionDetails.length === 0) {\r\n    await fetchPrescriptionDetails();\r\n  }\r\n  return mockPrescriptionDetails.filter(detail => detail.prescriptionId === prescriptionId);\r\n};\r\n\r\nexport const getMedicinesForPrescription = async (prescriptionId: string) => {\r\n  const details = await getPrescriptionDetailsByPrescriptionId(prescriptionId);\r\n  \r\n  const result = [];\r\n  for (const detail of details) {\r\n    const medicine = await getMedicineById(detail.medicineId);\r\n    result.push({\r\n      ...detail,\r\n      medicine: medicine || null\r\n    });\r\n  }\r\n  \r\n  return result;\r\n};\r\n\r\n// ============= INVOICE-RELATED FUNCTIONS =============\r\n\r\nexport const getAllInvoices = async () => {\r\n  if (mockInvoices.length === 0) {\r\n    await fetchInvoices();\r\n  }\r\n  return [...mockInvoices];\r\n};\r\n\r\nexport const getInvoiceById = async (id: string) => {\r\n  if (mockInvoices.length === 0) {\r\n    await fetchInvoices();\r\n  }\r\n  return mockInvoices.find(invoice => invoice._id === id);\r\n};\r\n\r\nexport const getInvoiceByPrescriptionId = async (prescriptionId: string) => {\r\n  if (mockInvoices.length === 0) {\r\n    await fetchInvoices();\r\n  }\r\n  return mockInvoices.find(invoice => invoice.prescriptionId === prescriptionId);\r\n};\r\n\r\nexport const getInvoicesByPatientId = async (patientId: string) => {\r\n  if (mockInvoices.length === 0) {\r\n    await fetchInvoices();\r\n  }\r\n  return mockInvoices.filter(invoice => invoice.patientId === patientId);\r\n};\r\n\r\nexport const getInvoicesByStatus = async (status: string) => {\r\n  if (mockInvoices.length === 0) {\r\n    await fetchInvoices();\r\n  }\r\n  return mockInvoices.filter(invoice => invoice.status === status);\r\n};\r\n\r\n// ============= UTILITY FUNCTIONS =============\r\n\r\nexport const getPatientFullPrescriptionDetails = async (patientId: string) => {\r\n  const prescriptions = await getPrescriptionsByPatientId(patientId);\r\n  \r\n  const result = [];\r\n  for (const prescription of prescriptions) {\r\n    // Lấy thông tin bác sĩ\r\n    const doctor = await getUserById(prescription.doctorId);\r\n    \r\n    // Lấy chi tiết đơn thuốc và thông tin thuốc\r\n    const details = await getPrescriptionDetailsByPrescriptionId(prescription._id);\r\n    const medicineDetails = [];\r\n    \r\n    for (const detail of details) {\r\n      const medicine = await getMedicineById(detail.medicineId);\r\n      medicineDetails.push({\r\n        ...detail,\r\n        medicineName: medicine ? medicine.name : 'Unknown',\r\n        medicinePrice: medicine ? medicine.price : 0\r\n      });\r\n    }\r\n    \r\n    // Lấy hóa đơn nếu có\r\n    const invoice = await getInvoiceByPrescriptionId(prescription._id);\r\n    \r\n    result.push({\r\n      ...prescription,\r\n      doctorName: doctor ? doctor.fullName : 'Unknown',\r\n      details: medicineDetails,\r\n      invoice: invoice || null\r\n    });\r\n  }\r\n  \r\n  return result;\r\n};\r\n\r\nexport const getAllPatients = async () => {\r\n  if (mockUsers.length === 0) {\r\n    await fetchUsers();\r\n  }\r\n  return mockUsers.filter(user => user.role === 'PATIENT');\r\n};\r\n\r\nexport const getAllDoctors = async () => {\r\n  if (mockUsers.length === 0) {\r\n    await fetchUsers();\r\n  }\r\n  return mockUsers.filter(user => user.role === 'DOCTOR');\r\n};\r\n\r\nexport type Patient = User;\r\nexport const mockPatients = getAllPatients;\r\n\r\nexport const getWaitingPatients = async () => {\r\n  const waitingQueues = await getQueuesByStatus('waiting');\r\n  \r\n  const result = [];\r\n  for (const queue of waitingQueues) {\r\n    const patient = await getUserById(queue.patient);\r\n    result.push({\r\n      queueInfo: queue,\r\n      patientInfo: patient || null\r\n    });\r\n  }\r\n  \r\n  return result;\r\n};\r\n\r\nexport const getAllQueuesWithPatientInfo = async () => {\r\n  if (mockQueues.length === 0) {\r\n    await fetchQueues();\r\n  }\r\n  \r\n  const result = [];\r\n  for (const queue of mockQueues) {\r\n    const patient = await getUserById(queue.patient);\r\n    result.push({\r\n      ...queue,\r\n      patientInfo: patient || null\r\n    });\r\n  }\r\n  \r\n  return result;\r\n};\r\n\r\n// Hàm tạo MongoDB-like ID\r\nexport const generateMongoId = () => {\r\n  // MongoDB ObjectId format: 24 hex characters\r\n  const timestamp = Math.floor(Date.now() / 1000).toString(16).padStart(8, '0');\r\n  const randomPart = Array(16).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('');\r\n  return timestamp + randomPart;\r\n};\r\n\r\n// Hàm để làm mới/reload dữ liệu từ API\r\nexport const reloadData = async (dataTypes?: ('users' | 'queues' | 'medicines' | 'prescriptions' | 'prescriptionDetails' | 'invoices')[]) => {\r\n  if (!dataTypes || dataTypes.length === 0) {\r\n    // Reload tất cả\r\n    return await initializeData();\r\n  }\r\n\r\n  const promises = [];\r\n  if (dataTypes.includes('users')) promises.push(fetchUsers());\r\n  if (dataTypes.includes('queues')) promises.push(fetchQueues());\r\n  if (dataTypes.includes('medicines')) promises.push(fetchMedicines());\r\n  if (dataTypes.includes('prescriptions')) promises.push(fetchPrescriptions());\r\n  if (dataTypes.includes('prescriptionDetails')) promises.push(fetchPrescriptionDetails());\r\n  if (dataTypes.includes('invoices')) promises.push(fetchInvoices());\r\n  \r\n  await Promise.all(promises);\r\n  return {\r\n    users: mockUsers.length,\r\n    queues: mockQueues.length,\r\n    medicines: mockMedicines.length,\r\n    prescriptions: mockPrescriptions.length,\r\n    prescriptionDetails: mockPrescriptionDetails.length,\r\n    invoices: mockInvoices.length\r\n  };\r\n};\r\n\r\n// Hàm thay thế để lấy dữ liệu khi không có quyền admin\r\nexport const fetchUsersAlternative = async () => {\r\n  console.log('Trying alternative method to fetch users...');\r\n  \r\n  try {\r\n    // Thử lấy thông tin người dùng hiện tại (me endpoint)\r\n    const currentUser = await authenticatedGet('/users/me');\r\n    if (!currentUser) {\r\n      console.warn('Could not fetch current user');\r\n      return [];\r\n    }\r\n    \r\n    console.log('Current user retrieved:', currentUser.role);\r\n    \r\n    if (currentUser.role === 'ADMIN') {\r\n      // Nếu là admin, thử lại với endpoint /users\r\n      return await fetchUsers();\r\n    }\r\n    \r\n    // Không phải admin, phải dùng cách khác\r\n    // 1. Nếu là bác sĩ, có thể lấy danh sách bệnh nhân được chỉ định\r\n    // 2. Nếu là receptionist, thử lấy dữ liệu theo cách khác\r\n    \r\n    // Endpoint hoặc API call thích hợp theo role\r\n    // Ví dụ: const patients = await authenticatedGet('/appointments/patients');\r\n    \r\n    // Tạm thời giữ nguyên dữ liệu hiện tại nếu có\r\n    return mockUsers.length > 0 ? mockUsers : [];\r\n  } catch (error) {\r\n    console.error('Alternative user fetch failed:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Mock function để gửi thông tin queue đến bác sĩ\r\nexport const sendQueueToDoctor = async (queueId: string): Promise<Queue | null> => {\r\n  try {\r\n    // Lấy thông tin queue\r\n    const queue = mockQueues.find(q => q._id === queueId);\r\n    \r\n    if (!queue) {\r\n      console.error(`Queue with ID ${queueId} not found.`);\r\n      return null;\r\n    }\r\n    \r\n    // Kiểm tra xem queue đã được gán cho bác sĩ chưa\r\n    if (!queue.doctorId) {\r\n      console.error(`Queue ${queueId} has no assigned doctor.`);\r\n      return null;\r\n    }\r\n    \r\n    // Trong môi trường thực tế, tại đây sẽ có logic gửi thông báo đến bác sĩ\r\n    // Trong mock data, ta chỉ cần đảm bảo trạng thái là in_progress\r\n    if (queue.status !== 'in_progress') {\r\n      queue.status = 'in_progress';\r\n      queue.updatedAt = new Date().toISOString();\r\n    }\r\n    \r\n    console.log(`Mock: Queue ${queueId} information sent to doctor ${queue.doctorId}`);\r\n    return queue;\r\n  } catch (error) {\r\n    console.error('Error sending queue information to doctor:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1114, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/dashboard-doctor/MedicineEntry.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Medicine as AuthMedicine } from '../datats/auth';\r\nimport { Medicine as MockMedicine, getAllMedicines as getMockMedicines } from '../datats/mockPatients';\r\nimport { TrashIcon, ChevronDownIcon } from 'lucide-react';\r\nimport * as apiService from '../services/api.service';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\ninterface MedicineEntryProps {\r\n  medicine: AuthMedicine;\r\n  onUpdate: (medicine: AuthMedicine) => void;\r\n  onRemove: (id: string) => void;\r\n}\r\n\r\nexport const MedicineEntry: React.FC<MedicineEntryProps> = ({\r\n  medicine,\r\n  onUpdate,\r\n  onRemove\r\n}) => {\r\n  // State để lưu thông tin đơn thuốc\r\n  const [name, setName] = useState(medicine.name);\r\n  const [totalPills, setTotalPills] = useState(medicine.totalPills ? medicine.totalPills.toString() : '0');\r\n  const [schedule, setSchedule] = useState(medicine.schedule || '');\r\n  \r\n  // State để quản lý dropdown\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const [availableMedicines, setAvailableMedicines] = useState<any[]>([]);\r\n  const [filteredMedicines, setFilteredMedicines] = useState<any[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { token } = useAuth();\r\n  \r\n  // Lấy danh sách thuốc từ API\r\n  useEffect(() => {\r\n    const fetchMedicines = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        let medicines = [];\r\n        \r\n        if (token) {\r\n          try {\r\n            // Sử dụng API thật nếu có token\r\n            console.log(\"Fetching medicines from API with token\");\r\n            medicines = await apiService.getMedicines(token);\r\n            console.log(\"Medicines fetched from API:\", medicines);\r\n          } catch (apiError: any) {\r\n            console.error(\"Error fetching medicines from API:\", apiError);\r\n            // Fallback to mock data if API call fails\r\n            console.log(\"Falling back to mock data\");\r\n            medicines = await getMockMedicines();\r\n          }\r\n        } else {\r\n          // Sử dụng mock data nếu không có token\r\n          console.log(\"No token available, using mock data\");\r\n          medicines = await getMockMedicines();\r\n        }\r\n        \r\n        setAvailableMedicines(medicines);\r\n        setFilteredMedicines(medicines);\r\n        setSearchTerm(name); // Đặt giá trị tìm kiếm ban đầu là tên thuốc hiện tại\r\n      } catch (error: any) {\r\n        console.error(\"Error fetching medicines:\", error);\r\n        setError(\"Không thể tải danh sách thuốc\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchMedicines();\r\n  }, [token, name]);\r\n  \r\n  // Thêm sự kiện click ngoài để đóng dropdown\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      const target = event.target as HTMLElement;\r\n      if (!target.closest(`#medicine-dropdown-${medicine.id}`)) {\r\n        setIsDropdownOpen(false);\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [medicine.id]);\r\n\r\n  // Cập nhật lại danh sách thuốc được lọc khi nhập term tìm kiếm\r\n  useEffect(() => {\r\n    if (searchTerm.trim() === '') {\r\n      setFilteredMedicines(availableMedicines);\r\n    } else {\r\n      const filtered = availableMedicines.filter(med => \r\n        med.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n      setFilteredMedicines(filtered);\r\n    }\r\n  }, [searchTerm, availableMedicines]);\r\n\r\n  // Xử lý khi chọn một loại thuốc từ danh sách\r\n  const handleSelectMedicine = (selectedMedicine: any) => {\r\n    setName(selectedMedicine.name);\r\n    setIsDropdownOpen(false);\r\n    setSearchTerm(selectedMedicine.name);\r\n    \r\n    console.log(\"Selected medicine from dropdown:\", selectedMedicine);\r\n    \r\n    // Store the MongoDB _id in the medicine object for later use\r\n    const updatedMedicine: AuthMedicine = {\r\n      ...medicine,\r\n      id: medicine.id, // Keep the original id for React keys and reference\r\n      name: selectedMedicine.name,\r\n      totalPills: parseInt(totalPills) || 0,\r\n      schedule\r\n    };\r\n    \r\n    // IMPORTANT: Add MongoDB medicine _id as medicineId property \r\n    // This will be used when sending data to the backend\r\n    (updatedMedicine as any).medicineId = selectedMedicine._id;\r\n    (updatedMedicine as any).price = selectedMedicine.price;\r\n    \r\n    console.log(\"Updated medicine object:\", updatedMedicine);\r\n    \r\n    onUpdate(updatedMedicine);\r\n  };\r\n  \r\n  // Xử lý thay đổi số lượng và cách dùng\r\n  const handleChange = () => {\r\n    const updatedMedicine = {\r\n      ...medicine,\r\n      name,\r\n      totalPills: parseInt(totalPills) || 0,\r\n      schedule\r\n    };\r\n    \r\n    // Đảm bảo giữ nguyên medicineId nếu đã có\r\n    if ((medicine as any).medicineId) {\r\n      (updatedMedicine as any).medicineId = (medicine as any).medicineId;\r\n      (updatedMedicine as any).price = (medicine as any).price;\r\n    }\r\n    \r\n    onUpdate(updatedMedicine);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-100 p-4 rounded-lg shadow-sm border border-gray-200\">\r\n      <div className=\"grid grid-cols-12 gap-4 items-center\">\r\n        <div className=\"col-span-3\">\r\n          <label htmlFor={`medicine-name-${medicine.id}`} className=\"block text-sm font-medium text-gray-800 mb-1\">\r\n            Tên thuốc\r\n          </label>\r\n          <div className=\"relative\" id={`medicine-dropdown-${medicine.id}`}>\r\n            <div \r\n              className=\"flex justify-between items-center w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 bg-white focus-within:border-blue-500 focus-within:ring-1 focus-within:ring-blue-500 cursor-pointer\"\r\n              onClick={() => setIsDropdownOpen(!isDropdownOpen)}\r\n            >\r\n              <input \r\n                type=\"text\"\r\n                id={`medicine-name-${medicine.id}`}\r\n                value={searchTerm}\r\n                onChange={(e) => {\r\n                  setSearchTerm(e.target.value);\r\n                  setIsDropdownOpen(true);\r\n                }}\r\n                onClick={(e) => e.stopPropagation()}\r\n                placeholder=\"Tìm thuốc...\"\r\n                className=\"border-none outline-none focus:ring-0 p-0 w-full text-base text-gray-800\"\r\n              />\r\n              <ChevronDownIcon className=\"h-5 w-5 text-gray-600\" />\r\n            </div>\r\n            \r\n            {isDropdownOpen && (\r\n              <div className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base overflow-auto focus:outline-none border border-gray-200\">\r\n                {isLoading ? (\r\n                  <div className=\"px-3 py-4 text-sm text-gray-600 text-center\">\r\n                    <div className=\"inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\r\n                    Đang tải danh sách thuốc...\r\n                  </div>\r\n                ) : error ? (\r\n                  <div className=\"px-3 py-2 text-sm text-red-600\">{error}</div>\r\n                ) : filteredMedicines.length === 0 ? (\r\n                  <div className=\"px-3 py-2 text-sm text-gray-600\">Không tìm thấy thuốc</div>\r\n                ) : (\r\n                  filteredMedicines.map(med => (\r\n                    <div\r\n                      key={med._id}\r\n                      className=\"px-3 py-2 cursor-pointer hover:bg-blue-50 text-sm text-gray-800\"\r\n                      onClick={() => handleSelectMedicine(med)}\r\n                    >\r\n                      {med.name} - <span className=\"text-blue-600 font-medium\">{med.price}đ/viên</span>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-span-3\">\r\n          <label htmlFor={`medicine-total-${medicine.id}`} className=\"block text-sm font-medium text-gray-800 mb-1\">\r\n            Tổng số viên\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            id={`medicine-total-${medicine.id}`}\r\n            value={totalPills}\r\n            min={0}\r\n            onChange={(e) => {\r\n              setTotalPills(e.target.value);\r\n              handleChange();\r\n            }}\r\n            placeholder=\"0\"\r\n            className=\"block w-full rounded-md border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base text-gray-800 placeholder-gray-400 px-3 py-2\"\r\n          />\r\n        </div>\r\n        <div className=\"col-span-5\">\r\n          <label htmlFor={`medicine-schedule-${medicine.id}`} className=\"block text-sm font-medium text-gray-800 mb-1\">\r\n            Lịch uống hàng ngày\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id={`medicine-schedule-${medicine.id}`}\r\n            value={schedule}\r\n            onChange={(e) => {\r\n              const newSchedule = e.target.value;\r\n              setSchedule(newSchedule);\r\n              // Cập nhật giá trị medicine ngay lập tức với giá trị mới của schedule\r\n              onUpdate({\r\n                ...medicine,\r\n                name,\r\n                totalPills: parseInt(totalPills) || 0,\r\n                schedule: newSchedule // Sử dụng giá trị mới nhất\r\n              });\r\n            }}\r\n            placeholder=\"VD: 1 sáng, 2 trưa, 1 tối\"\r\n            className=\"block w-full rounded-md border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base text-gray-800 placeholder-gray-400 px-3 py-2\"\r\n          />\r\n        </div>\r\n        <div className=\"col-span-1 flex items-end justify-end h-full\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => onRemove(medicine.id)}\r\n            className=\"p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 rounded-md transition-colors\"\r\n            aria-label=\"Xóa thuốc\"\r\n          >\r\n            <TrashIcon className=\"h-5 w-5\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1515, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/dashboard-doctor/PatientProfile.tsx"],"sourcesContent":["import React from 'react';\r\nimport { PhoneIcon, MapPinIcon, MailIcon, UserIcon } from 'lucide-react';\r\nimport { User } from '../datats/mockPatients';\r\n\r\ntype PatientProfileProps = {\r\n  patient: User | null;\r\n};\r\nexport const PatientProfile = ({\r\n  patient\r\n}: PatientProfileProps) => {\r\n  const formatPhoneNumber = (phone: string) => {\r\n    // Format Vietnamese phone number: 0912 345 678 or +84 912 345 678\r\n    if (phone.startsWith('+84')) {\r\n      return phone.replace(/(\\+84)(\\d{3})(\\d{3})(\\d{3})/, '$1 $2 $3 $4');\r\n    }\r\n    return phone.replace(/(\\d{4})(\\d{3})(\\d{3})/, '$1 $2 $3');\r\n  };\r\n  if (!patient) {\r\n    return <div className=\"p-4 bg-gray-50 rounded-lg text-gray-500 text-sm\">Không có thông tin bệnh nhân</div>;\r\n  }\r\n  \r\n  return <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\r\n      <div className=\"space-y-3\">\r\n        <div className=\"flex items-center text-sm text-gray-800\">\r\n          <UserIcon className=\"h-4 w-4 mr-2 text-gray-600\" />\r\n          <div>\r\n            <span className=\"font-medium\">ID:</span> {patient.userId}\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-center text-sm text-gray-800\">\r\n          <PhoneIcon className=\"h-4 w-4 mr-2 text-gray-600\" />\r\n          <div>\r\n            <span className=\"font-medium\">Số điện thoại:</span>{' '}\r\n            <a href={`tel:${patient.phone}`} className=\"text-blue-600 hover:text-blue-800\">\r\n              {formatPhoneNumber(patient.phone)}\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"space-y-3\">\r\n        <div className=\"flex items-start text-sm text-gray-800\">\r\n          <MailIcon className=\"h-4 w-4 mr-2 mt-1 text-gray-600 flex-shrink-0\" />\r\n          <div>\r\n            <span className=\"font-medium\">Email:</span>{' '}\r\n            <a href={`mailto:${patient.email}`} className=\"text-blue-600 hover:text-blue-800\">\r\n              {patient.email}\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-start text-sm text-gray-800\">\r\n          <MapPinIcon className=\"h-4 w-4 mr-2 mt-1 text-gray-600 flex-shrink-0\" />\r\n          <div>\r\n            <span className=\"font-medium\">Ngày tạo:</span> {new Date(patient.createdAt).toLocaleDateString()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>;\r\n};"],"names":[],"mappings":";;;;AACA;AAAA;AAAA;AAAA;;;AAMO,MAAM,iBAAiB,CAAC,EAC7B,OAAO,EACa;IACpB,MAAM,oBAAoB,CAAC;QACzB,kEAAkE;QAClE,IAAI,MAAM,UAAU,CAAC,QAAQ;YAC3B,OAAO,MAAM,OAAO,CAAC,+BAA+B;QACtD;QACA,OAAO,MAAM,OAAO,CAAC,yBAAyB;IAChD;IACA,IAAI,CAAC,SAAS;QACZ,qBAAO,6LAAC;YAAI,WAAU;sBAAkD;;;;;;IAC1E;IAEA,qBAAO,6LAAC;QAAI,WAAU;;0BAClB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,yMAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;0CACpB,6LAAC;;kDACC,6LAAC;wCAAK,WAAU;kDAAc;;;;;;oCAAU;oCAAE,QAAQ,MAAM;;;;;;;;;;;;;kCAG5D,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,2MAAA,CAAA,YAAS;gCAAC,WAAU;;;;;;0CACrB,6LAAC;;kDACC,6LAAC;wCAAK,WAAU;kDAAc;;;;;;oCAAsB;kDACpD,6LAAC;wCAAE,MAAM,CAAC,IAAI,EAAE,QAAQ,KAAK,EAAE;wCAAE,WAAU;kDACxC,kBAAkB,QAAQ,KAAK;;;;;;;;;;;;;;;;;;;;;;;;0BAKxC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,yMAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;0CACpB,6LAAC;;kDACC,6LAAC;wCAAK,WAAU;kDAAc;;;;;;oCAAc;kDAC5C,6LAAC;wCAAE,MAAM,CAAC,OAAO,EAAE,QAAQ,KAAK,EAAE;wCAAE,WAAU;kDAC3C,QAAQ,KAAK;;;;;;;;;;;;;;;;;;kCAIpB,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,iNAAA,CAAA,aAAU;gCAAC,WAAU;;;;;;0CACtB,6LAAC;;kDACC,6LAAC;wCAAK,WAAU;kDAAc;;;;;;oCAAgB;oCAAE,IAAI,KAAK,QAAQ,SAAS,EAAE,kBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;AAK1G;KAlDa","debugId":null}},
    {"offset": {"line": 1735, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/dashboard-doctor/DiagnosisPanel.tsx"],"sourcesContent":["'use client';\r\n\r\n/**\r\n * DiagnosisPanel - Component cho bác sĩ để khám và kê đơn thuốc\r\n * \r\n * Luồng hoạt động:\r\n * 1. Bác sĩ nhận bệnh nhân từ hàng đợi (queue)\r\n * 2. Nhập chẩn đoán và chọn thuốc\r\n * 3. Tạo đơn thuốc (prescription) với trạng thái \"PENDING_DISPENSE\"\r\n * 4. Tạo chi tiết đơn thuốc (prescriptionDetails) cho mỗi loại thuốc\r\n * 5. Cập nhật trạng thái queue thành \"completed\"\r\n * \r\n * Mô hình dữ liệu MongoDB:\r\n * - Prescription: {_id, customPrescriptionId, patientId, doctorId, diagnosis, date, status}\r\n * - PrescriptionDetail: {_id, customPrescriptionDetailId, prescriptionId, medicineId, quantity, dosage}\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { FileTextIcon, ClipboardListIcon, CalendarIcon, PlusIcon, UserIcon } from 'lucide-react';\r\nimport { MedicineEntry } from './MedicineEntry';\r\nimport { User } from '../datats/mockPatients';\r\nimport { Medicine } from '../datats/auth';\r\nimport { PatientProfile } from './PatientProfile';\r\nimport * as apiService from '../services/api.service';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\n// Interface cho thông tin bệnh nhân trong hàng đợi\r\ninterface PatientInQueue {\r\n  _id: string;\r\n  patient: string | { _id: string; [key: string]: any };\r\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled';\r\n  doctorId?: string | { _id: string; [key: string]: any };\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  __v?: number;\r\n  patientInfo: User | null;\r\n}\r\n\r\ninterface DiagnosisPanelProps {\r\n  patient: User | null;\r\n  queueInfo: PatientInQueue | null;\r\n  onMarkAsDone: (queueId: string) => void;\r\n}\r\n\r\nexport const DiagnosisPanel: React.FC<DiagnosisPanelProps> = ({\r\n  patient,\r\n  queueInfo,\r\n  onMarkAsDone\r\n}) => {\r\n  const { token } = useAuth();\r\n  const [diagnosis, setDiagnosis] = useState('');\r\n  const [prescription, setPrescription] = useState<Medicine[]>([]);\r\n  const [followUp, setFollowUp] = useState(false);\r\n  const [followUpDate, setFollowUpDate] = useState('');\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Reset form fields when patient changes\r\n    setDiagnosis('');\r\n    setPrescription([]);\r\n    setFollowUp(false);\r\n    setFollowUpDate('');\r\n    setError(null);\r\n    setSuccessMessage(null);\r\n  }, [patient]);\r\n\r\n  const canComplete = diagnosis.trim() !== '' && prescription.length > 0 && !loading;\r\n\r\n  const handleSave = async (e: React.FormEvent | React.MouseEvent | null = null) => {\r\n    // Prevent form submission if called from a form submit event\r\n    if (e && 'preventDefault' in e) e.preventDefault();\r\n    if (!patient || !queueInfo) return;\r\n    \r\n    // Validate before saving\r\n    if (!diagnosis.trim()) {\r\n      setError('Vui lòng nhập chẩn đoán');\r\n      return;\r\n    }\r\n    if (prescription.length === 0) {\r\n      setError('Vui lòng thêm ít nhất một loại thuốc');\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccessMessage(null);\r\n    \r\n    try {\r\n      if (!token) {\r\n        throw new Error('Không có token xác thực');\r\n      }\r\n      \r\n      // Format current date to YYYY-MM-DD\r\n      const today = new Date().toISOString().split('T')[0];\r\n      \r\n      // 1. Create a custom prescription ID - định dạng PRESC-YYYYMMDD-XXXX\r\n      const dateStr = today.replace(/-/g, '');\r\n      const customPrescriptionId = `PRESC-${dateStr}-${Date.now().toString().slice(-4)}`;\r\n      \r\n      // 2. Create the prescription trong MongoDB\r\n      \r\n      // Xử lý patient ID - lấy đúng ID MongoDB từ object\r\n      let patientId;\r\n      \r\n      if (typeof queueInfo.patient === 'string') {\r\n        patientId = queueInfo.patient;\r\n      } else if (queueInfo.patient && queueInfo.patient._id) {\r\n        patientId = queueInfo.patient._id;\r\n      } else {\r\n        console.error('Invalid patient data:', queueInfo.patient);\r\n        throw new Error('Không thể tạo đơn thuốc: Dữ liệu bệnh nhân không hợp lệ');\r\n      }\r\n      \r\n      // Xử lý doctor ID - đảm bảo luôn có doctorId\r\n      let doctorId;\r\n      \r\n      // First attempt: Get doctorId directly from the queue if it exists\r\n      if (queueInfo.doctorId) {\r\n        if (typeof queueInfo.doctorId === 'string') {\r\n          doctorId = queueInfo.doctorId;\r\n        } else if (queueInfo.doctorId._id) {\r\n          doctorId = queueInfo.doctorId._id;\r\n        }\r\n      }\r\n      \r\n      // Second attempt: If still no doctorId, use current user\r\n      if (!doctorId) {\r\n        try {\r\n          // Use the token to extract user information\r\n          if (token) {\r\n            // JWT typically has three parts: header.payload.signature\r\n            const tokenParts = token.split('.');\r\n            if (tokenParts.length === 3) {\r\n              // Decode the payload (middle part) - safely\r\n              try {\r\n                // For browser environment\r\n                let decodedPayload;\r\n                if (typeof window !== 'undefined' && window.atob) {\r\n                  decodedPayload = JSON.parse(window.atob(tokenParts[1]));\r\n                } else {\r\n                  // For Node.js environment or as a fallback\r\n                  const base64 = tokenParts[1].replace(/-/g, '+').replace(/_/g, '/');\r\n                  const jsonPayload = decodeURIComponent(\r\n                    Array.from(Buffer.from(base64, 'base64').toString('binary'))\r\n                      .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n                      .join('')\r\n                  );\r\n                  decodedPayload = JSON.parse(jsonPayload);\r\n                }\r\n                doctorId = decodedPayload.id; // Assuming JWT contains user ID as 'id'\r\n                console.log('Extracted doctor ID from token:', doctorId);\r\n              } catch (decodeError) {\r\n                console.error('Failed to decode JWT payload:', decodeError);\r\n              }\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.error('Error extracting user data from token:', err);\r\n        }\r\n      }\r\n      \r\n      // Third attempt: Try from localStorage\r\n      if (!doctorId) {\r\n        try {\r\n          const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\r\n          doctorId = currentUser?._id;\r\n          console.log('Using current user as doctor from localStorage:', doctorId);\r\n        } catch (err) {\r\n          console.error('Error getting user from localStorage:', err);\r\n        }\r\n      }\r\n        \r\n      console.log('Patient ID type:', typeof patientId, 'value:', patientId);\r\n      console.log('Doctor ID type:', typeof doctorId, 'value:', doctorId);\r\n      \r\n      if (!doctorId) {\r\n        console.error('ERROR: doctorId is undefined! Cannot create prescription without doctor ID.');\r\n        throw new Error('Không thể tạo đơn thuốc: Thiếu thông tin bác sĩ');\r\n      }\r\n      \r\n      const prescriptionData = {\r\n        customPrescriptionId, // ID tùy chỉnh của đơn thuốc để dễ nhận diện\r\n        patientId, // ID bệnh nhân đã xử lý ở trên\r\n        doctorId, // ID bác sĩ đã xử lý ở trên\r\n        diagnosis, // Chẩn đoán của bác sĩ\r\n        date: today, // Ngày kê đơn\r\n        status: 'PENDING_DISPENSE' // Trạng thái chờ cấp phát thuốc tại nhà thuốc\r\n      };\r\n      \r\n      console.log('Creating prescription with data:', prescriptionData);\r\n      \r\n      // Create the prescription and store it in this variable for later use\r\n      let createdPrescription;\r\n      \r\n      try {\r\n        // First try using a direct fetch for debugging with more detailed logs\r\n        console.log('Trying direct fetch to create prescription with data:', JSON.stringify(prescriptionData));\r\n        \r\n        try {\r\n          // Check token validity before attempting to create prescription\r\n          console.log('Token first 20 chars:', token?.substring(0, 20));\r\n          \r\n          const response = await fetch('http://localhost:5000/api/prescriptions', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify(prescriptionData)\r\n          });\r\n          \r\n          const responseText = await response.text();\r\n          console.log('Raw response text:', responseText);\r\n          \r\n          let responseData;\r\n          try {\r\n            // Parse JSON response if possible\r\n            responseData = JSON.parse(responseText);\r\n            console.log('Direct fetch response parsed:', response.status, responseData);\r\n          } catch (parseError) {\r\n            console.error('Failed to parse response as JSON:', parseError);\r\n            responseData = { message: 'Invalid JSON response' };\r\n          }\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`Direct fetch failed: ${response.status} - ${responseData.message || responseText || 'Unknown error'}`);\r\n          }\r\n\r\n          // If direct fetch succeeds, use it\r\n          createdPrescription = responseData;\r\n          console.log('Successfully created prescription with direct fetch:', createdPrescription);\r\n        } catch (fetchError) {\r\n          console.error('Direct fetch failed:', fetchError);\r\n          \r\n          // Fall back to the API service with detailed error logging\r\n          console.log('Falling back to apiService.createPrescription with data:', JSON.stringify(prescriptionData));\r\n          \r\n          // Ensure the IDs are strings before sending to API\r\n          const updatedPrescriptionData = {...prescriptionData};\r\n          \r\n          if (typeof updatedPrescriptionData.patientId === 'object' && updatedPrescriptionData.patientId !== null) {\r\n            const patientObj = updatedPrescriptionData.patientId as any;\r\n            if (patientObj._id) {\r\n              updatedPrescriptionData.patientId = patientObj._id.toString();\r\n            }\r\n          }\r\n          \r\n          if (typeof updatedPrescriptionData.doctorId === 'object' && updatedPrescriptionData.doctorId !== null) {\r\n            const doctorObj = updatedPrescriptionData.doctorId as any;\r\n            if (doctorObj._id) {\r\n              updatedPrescriptionData.doctorId = doctorObj._id.toString();\r\n            }\r\n          }\r\n          \r\n          console.log('Creating prescription with stringified IDs:', JSON.stringify(updatedPrescriptionData));\r\n          createdPrescription = await apiService.createPrescription(updatedPrescriptionData, token);\r\n        }\r\n        \r\n        console.log('Prescription created successfully:', createdPrescription);\r\n        \r\n        // Validate that we received a valid response with _id\r\n        if (!createdPrescription || !createdPrescription._id) {\r\n          console.error('ERROR: Created prescription is missing _id!', createdPrescription);\r\n          throw new Error('Created prescription is missing _id');\r\n        }\r\n      } catch (prescError: any) {\r\n        console.error('Failed to create prescription:', prescError);\r\n        throw new Error(`Không thể tạo đơn thuốc: ${prescError.message}`);\r\n      }\r\n      \r\n      // 3. Tạo chi tiết đơn thuốc (PrescriptionDetail) cho nhiều loại thuốc cùng lúc\r\n      // Chuẩn bị mảng dữ liệu cho batch creation API\r\n      // Log the original prescription data to debug\r\n      console.log('Original prescription data:', prescription);\r\n      \r\n      const validPrescriptionDetails = prescription\r\n        .filter(med => med.name && med.totalPills) // Lọc bỏ thuốc không có tên hoặc số lượng\r\n        .map(med => {\r\n          // Lấy đúng medicineId từ MongoDB - kiểm tra kỹ từng trường hợp\r\n          // Med có thể có trường medicineId (từ khi chọn từ dropdown) hoặc id (từ khi tạo mới)\r\n          const medicineId = (med as any).medicineId || med.id;\r\n          console.log(`Processing medicine: ${med.name}, ID: ${medicineId}, Type: ${typeof medicineId}`);\r\n          \r\n          if (!medicineId) {\r\n            console.error('Missing medicineId for', med);\r\n            throw new Error(`Missing medicineId for ${med.name}`);\r\n          }\r\n          \r\n          // Tạo một ID tùy chỉnh cho chi tiết đơn thuốc\r\n          const timestamp = Date.now().toString().slice(-8);\r\n          const medIdSuffix = typeof medicineId === 'string' ? medicineId.slice(-4) : Math.floor(Math.random() * 9000 + 1000).toString();\r\n          const customPrescriptionDetailId = `PRESCD-${timestamp}-${medIdSuffix}`;\r\n          \r\n          // Trả về cấu trúc dữ liệu cho mỗi chi tiết đơn thuốc\r\n          // Xử lý trường hợp schedule/dosage rỗng\r\n          const dosageValue = med.schedule && med.schedule.trim() \r\n            ? med.schedule \r\n            : 'Dùng theo chỉ dẫn của bác sĩ';\r\n          \r\n          console.log(`Medicine ${med.name}: using dosage value \"${dosageValue}\"`);\r\n          \r\n          return {\r\n            customPrescriptionDetailId,\r\n            medicineId,\r\n            quantity: med.totalPills,\r\n            dosage: dosageValue\r\n          };\r\n        });\r\n      \r\n      // Check if we have a valid prescription and details to create\r\n      if (!createdPrescription || !createdPrescription._id) {\r\n        console.error('Cannot create prescription details: No valid prescription created', createdPrescription);\r\n        throw new Error('Không thể tạo chi tiết đơn thuốc: Không có đơn thuốc hợp lệ');\r\n      }\r\n\r\n      // Convert the prescription ID to string to ensure compatibility with the API\r\n      const prescriptionId = createdPrescription._id.toString();\r\n      console.log(`Prescription created with ID: ${prescriptionId} (type: ${typeof prescriptionId})`);\r\n\r\n      if (validPrescriptionDetails.length === 0) {\r\n        console.warn('No valid prescription details to create');\r\n      } else {\r\n        console.log('Creating batch prescription details for prescription ID:', prescriptionId);\r\n        console.log('Prescription details data:', validPrescriptionDetails);\r\n        \r\n        try {\r\n          // Re-verify that we have valid medicine IDs in each detail\r\n          const verifiedDetails = validPrescriptionDetails.map(detail => {\r\n            // Ensure medicineId is a string\r\n            if (typeof detail.medicineId === 'object' && detail.medicineId !== null) {\r\n              detail.medicineId = (detail.medicineId as any)._id?.toString() || String(detail.medicineId);\r\n            } else if (detail.medicineId) {\r\n              detail.medicineId = String(detail.medicineId);\r\n            }\r\n            return detail;\r\n          });\r\n          \r\n          console.log('Verified prescription details:', verifiedDetails);\r\n          \r\n          // Create the batch prescription details using the prescription ID\r\n          const result = await apiService.createBatchPrescriptionDetails(\r\n            prescriptionId,\r\n            verifiedDetails,\r\n            token\r\n          );\r\n          console.log('Successfully created all prescription details in batch:', result);\r\n        } catch (detailsError: any) {\r\n          console.error('Failed to create prescription details:', detailsError);\r\n          // We'll continue even if prescription details creation fails\r\n          // The prescription has already been created, so we can still complete the process\r\n          setError(`Đơn thuốc đã được tạo nhưng có lỗi khi thêm chi tiết thuốc: ${detailsError.message}`);\r\n        }\r\n      }\r\n      \r\n      // 4. Cập nhật trạng thái queue thành 'completed'\r\n      console.log('Cập nhật trạng thái queue thành completed và kết thúc khám bệnh...');\r\n      onMarkAsDone(queueInfo._id);\r\n      \r\n      // Hiển thị thông báo thành công với thông tin về đơn thuốc\r\n      setSuccessMessage(\r\n        `Đã tạo đơn thuốc ${customPrescriptionId} thành công cho bệnh nhân ${patient.fullName}!\r\n        Đơn thuốc với ${validPrescriptionDetails.length} loại thuốc đã được gửi đến nhà thuốc với trạng thái \"Chờ cấp phát\".\r\n        Bệnh nhân có thể đến quầy thuốc để nhận thuốc.`\r\n      );\r\n      \r\n      // Xóa form để sẵn sàng cho bệnh nhân tiếp theo\r\n      setDiagnosis('');\r\n      setPrescription([]);\r\n      setFollowUp(false);\r\n      setFollowUpDate('');\r\n      \r\n    } catch (error: any) {\r\n      console.error('Error creating prescription:', error);\r\n      \r\n      let errorMessage = 'Không xác định';\r\n      \r\n      // Xử lý thông báo lỗi từ API\r\n      if (error.response) {\r\n        console.error('API error response:', error.response);\r\n        \r\n        if (error.response.data && error.response.data.message) {\r\n          errorMessage = error.response.data.message;\r\n          \r\n          // Thêm chi tiết lỗi nếu có\r\n          if (error.response.data.details) {\r\n            errorMessage += `: ${error.response.data.details}`;\r\n          }\r\n          \r\n          // Xử lý lỗi cụ thể cho các trường hợp đặc biệt\r\n          if (error.response.status === 500) {\r\n            errorMessage = \"Lỗi server: Vui lòng thử lại sau hoặc liên hệ quản trị viên\";\r\n          }\r\n          \r\n          if (error.response.status === 400 && error.response.data.invalidDetails) {\r\n            errorMessage = `Có ${error.response.data.invalidDetails.length} loại thuốc không hợp lệ. Vui lòng kiểm tra lại thông tin.`;\r\n          }\r\n        }\r\n      } else if (error.message) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      setError(`Lỗi khi tạo đơn thuốc: ${errorMessage}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddMedicine = () => {\r\n    // Tạo thuốc mới với cấu trúc phù hợp với Medicine từ auth.ts\r\n    const newMedicine: Medicine = {\r\n      id: Date.now().toString(),\r\n      name: '',\r\n      totalPills: 0,\r\n      schedule: ''\r\n    };\r\n    setPrescription([...prescription, newMedicine]);\r\n  };\r\n\r\n  const handleUpdateMedicine = (updatedMedicine: Medicine) => {\r\n    setPrescription(prescription.map(med => \r\n      med.id === updatedMedicine.id ? updatedMedicine : med\r\n    ));\r\n  };\r\n\r\n  const handleRemoveMedicine = (medicineId: string) => {\r\n    setPrescription(prescription.filter(med => med.id !== medicineId));\r\n  };\r\n\r\n  if (!patient) {\r\n    return <div className=\"bg-white rounded-lg shadow-md h-full flex items-center justify-center p-8\">\r\n        <div className=\"text-center\">\r\n          <FileTextIcon className=\"mx-auto h-12 w-12 text-gray-600\" />\r\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\r\n            Chưa chọn bệnh nhân\r\n          </h3>\r\n          <p className=\"mt-1 text-sm text-gray-700\">\r\n            Vui lòng chọn bệnh nhân từ danh sách chờ để bắt đầu khám\r\n          </p>\r\n        </div>\r\n      </div>;\r\n  }\r\n\r\n  return <div className=\"bg-white rounded-lg shadow-md h-full\">\r\n      <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\r\n        <div>\r\n          <h2 className=\"text-lg font-medium text-gray-900\">{patient?.fullName || 'Không có tên'}</h2>\r\n          <p className=\"text-sm text-gray-500\">\r\n            {patient?.email} • {patient?.phone}\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={() => handleSave(null)}\r\n          disabled={!canComplete || loading}\r\n          className={`px-4 py-2 text-sm font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors ${\r\n            loading ? 'bg-gray-400 text-white cursor-not-allowed' :\r\n            canComplete ? 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500 cursor-pointer' : \r\n            'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n          }`}\r\n        >\r\n          {loading ? 'Đang xử lý...' : 'Hoàn thành khám'}\r\n        </button>\r\n      </div>\r\n      <div className=\"p-4 overflow-y-auto space-y-6\" style={{\r\n      maxHeight: 'calc(100vh - 250px)'\r\n    }}>\r\n        {error && (\r\n          <div className=\"mb-4 p-3 bg-red-100 border border-red-300 rounded text-red-700 font-medium\">{error}</div>\r\n        )}\r\n        {successMessage && (\r\n          <div className=\"mb-4 p-4 bg-green-100 border border-green-300 rounded text-green-700\">\r\n            <h4 className=\"font-bold mb-2 flex items-center\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n              </svg>\r\n              Đơn thuốc đã được tạo thành công!\r\n            </h4>\r\n            <p className=\"whitespace-pre-line\">{successMessage}</p>\r\n            <p className=\"mt-2 text-green-600\">Bệnh nhân sẽ được chuyển tới quầy thuốc để nhận thuốc.</p>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <h3 className=\"text-sm font-medium text-gray-900 flex items-center mb-3\">\r\n            <UserIcon className=\"h-4 w-4 mr-2 text-blue-500\" />\r\n            Thông tin bệnh nhân\r\n          </h3>\r\n          <PatientProfile patient={patient} />\r\n        </div>\r\n        <div className=\"p-4 bg-gray-50 rounded-lg\">\r\n          <h3 className=\"text-sm font-medium text-gray-900 flex items-center\">\r\n            <ClipboardListIcon className=\"h-4 w-4 mr-2 text-blue-500\" />\r\n            Thông tin khám bệnh\r\n          </h3>\r\n          <div className=\"mt-2 text-sm text-gray-800\">\r\n            <p>\r\n              <strong>Thời gian chờ:</strong>{' '}\r\n              {queueInfo ? `${Math.floor((new Date().getTime() - new Date(queueInfo.createdAt).getTime()) / 60000)} phút` : 'Không xác định'}\r\n            </p>\r\n            <p>\r\n              <strong>Trạng thái:</strong>{' '}\r\n              <span className={`font-medium ${queueInfo?.status === 'waiting' ? 'text-yellow-600' : queueInfo?.status === 'in_progress' ? 'text-blue-600' : queueInfo?.status === 'completed' ? 'text-green-600' : 'text-red-600'}`}>\r\n                {queueInfo?.status === 'waiting' ? 'Đang chờ' : \r\n                queueInfo?.status === 'in_progress' ? 'Đang khám' : \r\n                queueInfo?.status === 'completed' ? 'Đã hoàn thành' : 'Đã hủy'}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <strong>Ngày tạo:</strong>{' '}\r\n              {queueInfo ? new Date(queueInfo.createdAt).toLocaleString() : 'Không xác định'}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <form onSubmit={(e) => handleSave(e)} className=\"space-y-6\">\r\n          <div>\r\n            <label htmlFor=\"diagnosis\" className=\"block text-base font-semibold text-gray-900\">\r\n              Chẩn đoán\r\n            </label>\r\n            <textarea\r\n              id=\"diagnosis\"\r\n              value={diagnosis}\r\n              onChange={(e) => setDiagnosis(e.target.value)}\r\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-600 focus:ring-blue-600 text-base text-gray-900 placeholder-gray-500\"\r\n              rows={3}\r\n              placeholder=\"Nhập thông tin chẩn đoán chi tiết cho bệnh nhân...\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <label className=\"block text-base font-semibold text-gray-900\">\r\n                Đơn thuốc\r\n              </label>\r\n              <button\r\n                type=\"button\"\r\n                onClick={handleAddMedicine}\r\n                className=\"inline-flex items-center px-4 py-2 border border-transparent text-base font-semibold rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer\"\r\n              >\r\n                Thêm thuốc\r\n              </button>\r\n            </div>\r\n            <div className=\"space-y-4\">\r\n              {prescription.map((medicine) => (\r\n                <MedicineEntry\r\n                  key={medicine.id}\r\n                  medicine={medicine}\r\n                  onUpdate={handleUpdateMedicine}\r\n                  onRemove={handleRemoveMedicine}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <div className=\"flex items-center mb-2\">\r\n              <input\r\n                id=\"followUp\"\r\n                type=\"checkbox\"\r\n                checked={followUp}\r\n                onChange={e => setFollowUp(e.target.checked)}\r\n                className=\"focus:ring-blue-500 h-5 w-5 text-blue-600 border-gray-300 rounded cursor-pointer\"\r\n              />\r\n              <label htmlFor=\"followUp\" className=\"ml-2 block text-base font-semibold text-gray-900 cursor-pointer select-none\">\r\n                Đặt lịch tái khám\r\n              </label>\r\n            </div>\r\n            {followUp && (\r\n              <div>\r\n                <label htmlFor=\"followUpDate\" className=\"block text-base font-semibold text-gray-900 mb-1\">\r\n                  Ngày tái khám\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <span className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                    <CalendarIcon className=\"h-5 w-5 text-gray-400\" />\r\n                  </span>\r\n                  <input\r\n                    type=\"date\"\r\n                    id=\"followUpDate\"\r\n                    value={followUpDate}\r\n                    onChange={e => setFollowUpDate(e.target.value)}\r\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-blue-600 focus:ring-blue-600 text-base text-gray-900\"\r\n                    min={new Date().toISOString().split('T')[0]}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>;\r\n};"],"names":[],"mappings":";;;AAiJ+B;;AA/I/B;;;;;;;;;;;;;CAaC,GAED;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;;;AAxBA;;;;;;;AA4CO,MAAM,iBAAgD,CAAC,EAC5D,OAAO,EACP,SAAS,EACT,YAAY,EACb;;IACC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,wIAAA,CAAA,UAAO,AAAD;IACxB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IAC/D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAEpE,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;oCAAE;YACR,yCAAyC;YACzC,aAAa;YACb,gBAAgB,EAAE;YAClB,YAAY;YACZ,gBAAgB;YAChB,SAAS;YACT,kBAAkB;QACpB;mCAAG;QAAC;KAAQ;IAEZ,MAAM,cAAc,UAAU,IAAI,OAAO,MAAM,aAAa,MAAM,GAAG,KAAK,CAAC;IAE3E,MAAM,aAAa,OAAO,IAA+C,IAAI;QAC3E,6DAA6D;QAC7D,IAAI,KAAK,oBAAoB,GAAG,EAAE,cAAc;QAChD,IAAI,CAAC,WAAW,CAAC,WAAW;QAE5B,yBAAyB;QACzB,IAAI,CAAC,UAAU,IAAI,IAAI;YACrB,SAAS;YACT;QACF;QACA,IAAI,aAAa,MAAM,KAAK,GAAG;YAC7B,SAAS;YACT;QACF;QAEA,WAAW;QACX,SAAS;QACT,kBAAkB;QAElB,IAAI;YACF,IAAI,CAAC,OAAO;gBACV,MAAM,IAAI,MAAM;YAClB;YAEA,oCAAoC;YACpC,MAAM,QAAQ,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;YAEpD,qEAAqE;YACrE,MAAM,UAAU,MAAM,OAAO,CAAC,MAAM;YACpC,MAAM,uBAAuB,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,KAAK,GAAG,GAAG,QAAQ,GAAG,KAAK,CAAC,CAAC,IAAI;YAElF,2CAA2C;YAE3C,mDAAmD;YACnD,IAAI;YAEJ,IAAI,OAAO,UAAU,OAAO,KAAK,UAAU;gBACzC,YAAY,UAAU,OAAO;YAC/B,OAAO,IAAI,UAAU,OAAO,IAAI,UAAU,OAAO,CAAC,GAAG,EAAE;gBACrD,YAAY,UAAU,OAAO,CAAC,GAAG;YACnC,OAAO;gBACL,QAAQ,KAAK,CAAC,yBAAyB,UAAU,OAAO;gBACxD,MAAM,IAAI,MAAM;YAClB;YAEA,6CAA6C;YAC7C,IAAI;YAEJ,mEAAmE;YACnE,IAAI,UAAU,QAAQ,EAAE;gBACtB,IAAI,OAAO,UAAU,QAAQ,KAAK,UAAU;oBAC1C,WAAW,UAAU,QAAQ;gBAC/B,OAAO,IAAI,UAAU,QAAQ,CAAC,GAAG,EAAE;oBACjC,WAAW,UAAU,QAAQ,CAAC,GAAG;gBACnC;YACF;YAEA,yDAAyD;YACzD,IAAI,CAAC,UAAU;gBACb,IAAI;oBACF,4CAA4C;oBAC5C,IAAI,OAAO;wBACT,0DAA0D;wBAC1D,MAAM,aAAa,MAAM,KAAK,CAAC;wBAC/B,IAAI,WAAW,MAAM,KAAK,GAAG;4BAC3B,4CAA4C;4BAC5C,IAAI;gCACF,0BAA0B;gCAC1B,IAAI;gCACJ,IAAI,aAAkB,eAAe,OAAO,IAAI,EAAE;oCAChD,iBAAiB,KAAK,KAAK,CAAC,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;gCACvD,OAAO;oCACL,2CAA2C;oCAC3C,MAAM,SAAS,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM;oCAC9D,MAAM,cAAc,mBAClB,MAAM,IAAI,CAAC,8JAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ,UAAU,QAAQ,CAAC,WAC/C,GAAG,CAAC,CAAA,IAAK,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,IAC5D,IAAI,CAAC;oCAEV,iBAAiB,KAAK,KAAK,CAAC;gCAC9B;gCACA,WAAW,eAAe,EAAE,EAAE,wCAAwC;gCACtE,QAAQ,GAAG,CAAC,mCAAmC;4BACjD,EAAE,OAAO,aAAa;gCACpB,QAAQ,KAAK,CAAC,iCAAiC;4BACjD;wBACF;oBACF;gBACF,EAAE,OAAO,KAAK;oBACZ,QAAQ,KAAK,CAAC,0CAA0C;gBAC1D;YACF;YAEA,uCAAuC;YACvC,IAAI,CAAC,UAAU;gBACb,IAAI;oBACF,MAAM,cAAc,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,WAAW;oBAC/D,WAAW,aAAa;oBACxB,QAAQ,GAAG,CAAC,mDAAmD;gBACjE,EAAE,OAAO,KAAK;oBACZ,QAAQ,KAAK,CAAC,yCAAyC;gBACzD;YACF;YAEA,QAAQ,GAAG,CAAC,oBAAoB,OAAO,WAAW,UAAU;YAC5D,QAAQ,GAAG,CAAC,mBAAmB,OAAO,UAAU,UAAU;YAE1D,IAAI,CAAC,UAAU;gBACb,QAAQ,KAAK,CAAC;gBACd,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,mBAAmB;gBACvB;gBACA;gBACA;gBACA;gBACA,MAAM;gBACN,QAAQ,mBAAmB,8CAA8C;YAC3E;YAEA,QAAQ,GAAG,CAAC,oCAAoC;YAEhD,sEAAsE;YACtE,IAAI;YAEJ,IAAI;gBACF,uEAAuE;gBACvE,QAAQ,GAAG,CAAC,yDAAyD,KAAK,SAAS,CAAC;gBAEpF,IAAI;oBACF,gEAAgE;oBAChE,QAAQ,GAAG,CAAC,yBAAyB,OAAO,UAAU,GAAG;oBAEzD,MAAM,WAAW,MAAM,MAAM,2CAA2C;wBACtE,QAAQ;wBACR,SAAS;4BACP,gBAAgB;4BAChB,iBAAiB,CAAC,OAAO,EAAE,OAAO;wBACpC;wBACA,MAAM,KAAK,SAAS,CAAC;oBACvB;oBAEA,MAAM,eAAe,MAAM,SAAS,IAAI;oBACxC,QAAQ,GAAG,CAAC,sBAAsB;oBAElC,IAAI;oBACJ,IAAI;wBACF,kCAAkC;wBAClC,eAAe,KAAK,KAAK,CAAC;wBAC1B,QAAQ,GAAG,CAAC,iCAAiC,SAAS,MAAM,EAAE;oBAChE,EAAE,OAAO,YAAY;wBACnB,QAAQ,KAAK,CAAC,qCAAqC;wBACnD,eAAe;4BAAE,SAAS;wBAAwB;oBACpD;oBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,MAAM,IAAI,MAAM,CAAC,qBAAqB,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,aAAa,OAAO,IAAI,gBAAgB,iBAAiB;oBACxH;oBAEA,mCAAmC;oBACnC,sBAAsB;oBACtB,QAAQ,GAAG,CAAC,wDAAwD;gBACtE,EAAE,OAAO,YAAY;oBACnB,QAAQ,KAAK,CAAC,wBAAwB;oBAEtC,2DAA2D;oBAC3D,QAAQ,GAAG,CAAC,4DAA4D,KAAK,SAAS,CAAC;oBAEvF,mDAAmD;oBACnD,MAAM,0BAA0B;wBAAC,GAAG,gBAAgB;oBAAA;oBAEpD,IAAI,OAAO,wBAAwB,SAAS,KAAK,YAAY,wBAAwB,SAAS,KAAK,MAAM;wBACvG,MAAM,aAAa,wBAAwB,SAAS;wBACpD,IAAI,WAAW,GAAG,EAAE;4BAClB,wBAAwB,SAAS,GAAG,WAAW,GAAG,CAAC,QAAQ;wBAC7D;oBACF;oBAEA,IAAI,OAAO,wBAAwB,QAAQ,KAAK,YAAY,wBAAwB,QAAQ,KAAK,MAAM;wBACrG,MAAM,YAAY,wBAAwB,QAAQ;wBAClD,IAAI,UAAU,GAAG,EAAE;4BACjB,wBAAwB,QAAQ,GAAG,UAAU,GAAG,CAAC,QAAQ;wBAC3D;oBACF;oBAEA,QAAQ,GAAG,CAAC,+CAA+C,KAAK,SAAS,CAAC;oBAC1E,sBAAsB,MAAM,CAAA,GAAA,2IAAA,CAAA,qBAA6B,AAAD,EAAE,yBAAyB;gBACrF;gBAEA,QAAQ,GAAG,CAAC,sCAAsC;gBAElD,sDAAsD;gBACtD,IAAI,CAAC,uBAAuB,CAAC,oBAAoB,GAAG,EAAE;oBACpD,QAAQ,KAAK,CAAC,+CAA+C;oBAC7D,MAAM,IAAI,MAAM;gBAClB;YACF,EAAE,OAAO,YAAiB;gBACxB,QAAQ,KAAK,CAAC,kCAAkC;gBAChD,MAAM,IAAI,MAAM,CAAC,yBAAyB,EAAE,WAAW,OAAO,EAAE;YAClE;YAEA,+EAA+E;YAC/E,+CAA+C;YAC/C,8CAA8C;YAC9C,QAAQ,GAAG,CAAC,+BAA+B;YAE3C,MAAM,2BAA2B,aAC9B,MAAM,CAAC,CAAA,MAAO,IAAI,IAAI,IAAI,IAAI,UAAU,EAAE,0CAA0C;aACpF,GAAG,CAAC,CAAA;gBACH,+DAA+D;gBAC/D,qFAAqF;gBACrF,MAAM,aAAa,AAAC,IAAY,UAAU,IAAI,IAAI,EAAE;gBACpD,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,WAAW,QAAQ,EAAE,OAAO,YAAY;gBAE7F,IAAI,CAAC,YAAY;oBACf,QAAQ,KAAK,CAAC,0BAA0B;oBACxC,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,IAAI,IAAI,EAAE;gBACtD;gBAEA,8CAA8C;gBAC9C,MAAM,YAAY,KAAK,GAAG,GAAG,QAAQ,GAAG,KAAK,CAAC,CAAC;gBAC/C,MAAM,cAAc,OAAO,eAAe,WAAW,WAAW,KAAK,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO,MAAM,QAAQ;gBAC5H,MAAM,6BAA6B,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE,aAAa;gBAEvE,qDAAqD;gBACrD,wCAAwC;gBACxC,MAAM,cAAc,IAAI,QAAQ,IAAI,IAAI,QAAQ,CAAC,IAAI,KACjD,IAAI,QAAQ,GACZ;gBAEJ,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,sBAAsB,EAAE,YAAY,CAAC,CAAC;gBAEvE,OAAO;oBACL;oBACA;oBACA,UAAU,IAAI,UAAU;oBACxB,QAAQ;gBACV;YACF;YAEF,8DAA8D;YAC9D,IAAI,CAAC,uBAAuB,CAAC,oBAAoB,GAAG,EAAE;gBACpD,QAAQ,KAAK,CAAC,qEAAqE;gBACnF,MAAM,IAAI,MAAM;YAClB;YAEA,6EAA6E;YAC7E,MAAM,iBAAiB,oBAAoB,GAAG,CAAC,QAAQ;YACvD,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,eAAe,QAAQ,EAAE,OAAO,eAAe,CAAC,CAAC;YAE9F,IAAI,yBAAyB,MAAM,KAAK,GAAG;gBACzC,QAAQ,IAAI,CAAC;YACf,OAAO;gBACL,QAAQ,GAAG,CAAC,4DAA4D;gBACxE,QAAQ,GAAG,CAAC,8BAA8B;gBAE1C,IAAI;oBACF,2DAA2D;oBAC3D,MAAM,kBAAkB,yBAAyB,GAAG,CAAC,CAAA;wBACnD,gCAAgC;wBAChC,IAAI,OAAO,OAAO,UAAU,KAAK,YAAY,OAAO,UAAU,KAAK,MAAM;4BACvE,OAAO,UAAU,GAAG,AAAC,OAAO,UAAU,CAAS,GAAG,EAAE,cAAc,OAAO,OAAO,UAAU;wBAC5F,OAAO,IAAI,OAAO,UAAU,EAAE;4BAC5B,OAAO,UAAU,GAAG,OAAO,OAAO,UAAU;wBAC9C;wBACA,OAAO;oBACT;oBAEA,QAAQ,GAAG,CAAC,kCAAkC;oBAE9C,kEAAkE;oBAClE,MAAM,SAAS,MAAM,CAAA,GAAA,2IAAA,CAAA,iCAAyC,AAAD,EAC3D,gBACA,iBACA;oBAEF,QAAQ,GAAG,CAAC,2DAA2D;gBACzE,EAAE,OAAO,cAAmB;oBAC1B,QAAQ,KAAK,CAAC,0CAA0C;oBACxD,6DAA6D;oBAC7D,kFAAkF;oBAClF,SAAS,CAAC,4DAA4D,EAAE,aAAa,OAAO,EAAE;gBAChG;YACF;YAEA,iDAAiD;YACjD,QAAQ,GAAG,CAAC;YACZ,aAAa,UAAU,GAAG;YAE1B,2DAA2D;YAC3D,kBACE,CAAC,iBAAiB,EAAE,qBAAqB,0BAA0B,EAAE,QAAQ,QAAQ,CAAC;sBACxE,EAAE,yBAAyB,MAAM,CAAC;sDACF,CAAC;YAGjD,+CAA+C;YAC/C,aAAa;YACb,gBAAgB,EAAE;YAClB,YAAY;YACZ,gBAAgB;QAElB,EAAE,OAAO,OAAY;YACnB,QAAQ,KAAK,CAAC,gCAAgC;YAE9C,IAAI,eAAe;YAEnB,6BAA6B;YAC7B,IAAI,MAAM,QAAQ,EAAE;gBAClB,QAAQ,KAAK,CAAC,uBAAuB,MAAM,QAAQ;gBAEnD,IAAI,MAAM,QAAQ,CAAC,IAAI,IAAI,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE;oBACtD,eAAe,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO;oBAE1C,2BAA2B;oBAC3B,IAAI,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE;wBAC/B,gBAAgB,CAAC,EAAE,EAAE,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE;oBACpD;oBAEA,+CAA+C;oBAC/C,IAAI,MAAM,QAAQ,CAAC,MAAM,KAAK,KAAK;wBACjC,eAAe;oBACjB;oBAEA,IAAI,MAAM,QAAQ,CAAC,MAAM,KAAK,OAAO,MAAM,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE;wBACvE,eAAe,CAAC,GAAG,EAAE,MAAM,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,0DAA0D,CAAC;oBAC5H;gBACF;YACF,OAAO,IAAI,MAAM,OAAO,EAAE;gBACxB,eAAe,MAAM,OAAO;YAC9B;YAEA,SAAS,CAAC,uBAAuB,EAAE,cAAc;QACnD,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,oBAAoB;QACxB,6DAA6D;QAC7D,MAAM,cAAwB;YAC5B,IAAI,KAAK,GAAG,GAAG,QAAQ;YACvB,MAAM;YACN,YAAY;YACZ,UAAU;QACZ;QACA,gBAAgB;eAAI;YAAc;SAAY;IAChD;IAEA,MAAM,uBAAuB,CAAC;QAC5B,gBAAgB,aAAa,GAAG,CAAC,CAAA,MAC/B,IAAI,EAAE,KAAK,gBAAgB,EAAE,GAAG,kBAAkB;IAEtD;IAEA,MAAM,uBAAuB,CAAC;QAC5B,gBAAgB,aAAa,MAAM,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;IACxD;IAEA,IAAI,CAAC,SAAS;QACZ,qBAAO,6LAAC;YAAI,WAAU;sBAClB,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,qNAAA,CAAA,eAAY;wBAAC,WAAU;;;;;;kCACxB,6LAAC;wBAAG,WAAU;kCAAyC;;;;;;kCAGvD,6LAAC;wBAAE,WAAU;kCAA6B;;;;;;;;;;;;;;;;;IAKlD;IAEA,qBAAO,6LAAC;QAAI,WAAU;;0BAClB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;;0CACC,6LAAC;gCAAG,WAAU;0CAAqC,SAAS,YAAY;;;;;;0CACxE,6LAAC;gCAAE,WAAU;;oCACV,SAAS;oCAAM;oCAAI,SAAS;;;;;;;;;;;;;kCAGjC,6LAAC;wBACC,SAAS,IAAM,WAAW;wBAC1B,UAAU,CAAC,eAAe;wBAC1B,WAAW,CAAC,iHAAiH,EAC3H,UAAU,8CACV,cAAc,mFACd,gDACA;kCAED,UAAU,kBAAkB;;;;;;;;;;;;0BAGjC,6LAAC;gBAAI,WAAU;gBAAgC,OAAO;oBACtD,WAAW;gBACb;;oBACK,uBACC,6LAAC;wBAAI,WAAU;kCAA8E;;;;;;oBAE9F,gCACC,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;;kDACZ,6LAAC;wCAAI,OAAM;wCAA6B,WAAU;wCAAe,MAAK;wCAAO,SAAQ;wCAAY,QAAO;kDACtG,cAAA,6LAAC;4CAAK,eAAc;4CAAQ,gBAAe;4CAAQ,aAAa;4CAAG,GAAE;;;;;;;;;;;oCACjE;;;;;;;0CAGR,6LAAC;gCAAE,WAAU;0CAAuB;;;;;;0CACpC,6LAAC;gCAAE,WAAU;0CAAsB;;;;;;;;;;;;kCAGvC,6LAAC;;0CACC,6LAAC;gCAAG,WAAU;;kDACZ,6LAAC,yMAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;oCAA+B;;;;;;;0CAGrD,6LAAC,uJAAA,CAAA,iBAAc;gCAAC,SAAS;;;;;;;;;;;;kCAE3B,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;;kDACZ,6LAAC,+NAAA,CAAA,oBAAiB;wCAAC,WAAU;;;;;;oCAA+B;;;;;;;0CAG9D,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;;0DACC,6LAAC;0DAAO;;;;;;4CAAwB;4CAC/B,YAAY,GAAG,KAAK,KAAK,CAAC,CAAC,IAAI,OAAO,OAAO,KAAK,IAAI,KAAK,UAAU,SAAS,EAAE,OAAO,EAAE,IAAI,OAAO,KAAK,CAAC,GAAG;;;;;;;kDAEhH,6LAAC;;0DACC,6LAAC;0DAAO;;;;;;4CAAqB;0DAC7B,6LAAC;gDAAK,WAAW,CAAC,YAAY,EAAE,WAAW,WAAW,YAAY,oBAAoB,WAAW,WAAW,gBAAgB,kBAAkB,WAAW,WAAW,cAAc,mBAAmB,gBAAgB;0DAClN,WAAW,WAAW,YAAY,aACnC,WAAW,WAAW,gBAAgB,cACtC,WAAW,WAAW,cAAc,kBAAkB;;;;;;;;;;;;kDAG1D,6LAAC;;0DACC,6LAAC;0DAAO;;;;;;4CAAmB;4CAC1B,YAAY,IAAI,KAAK,UAAU,SAAS,EAAE,cAAc,KAAK;;;;;;;;;;;;;;;;;;;kCAIpE,6LAAC;wBAAK,UAAU,CAAC,IAAM,WAAW;wBAAI,WAAU;;0CAC9C,6LAAC;;kDACC,6LAAC;wCAAM,SAAQ;wCAAY,WAAU;kDAA8C;;;;;;kDAGnF,6LAAC;wCACC,IAAG;wCACH,OAAO;wCACP,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;wCAC5C,WAAU;wCACV,MAAM;wCACN,aAAY;;;;;;;;;;;;0CAIhB,6LAAC;;kDACC,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAM,WAAU;0DAA8C;;;;;;0DAG/D,6LAAC;gDACC,MAAK;gDACL,SAAS;gDACT,WAAU;0DACX;;;;;;;;;;;;kDAIH,6LAAC;wCAAI,WAAU;kDACZ,aAAa,GAAG,CAAC,CAAC,yBACjB,6LAAC,sJAAA,CAAA,gBAAa;gDAEZ,UAAU;gDACV,UAAU;gDACV,UAAU;+CAHL,SAAS,EAAE;;;;;;;;;;;;;;;;0CASxB,6LAAC;;kDACC,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDACC,IAAG;gDACH,MAAK;gDACL,SAAS;gDACT,UAAU,CAAA,IAAK,YAAY,EAAE,MAAM,CAAC,OAAO;gDAC3C,WAAU;;;;;;0DAEZ,6LAAC;gDAAM,SAAQ;gDAAW,WAAU;0DAA8E;;;;;;;;;;;;oCAInH,0BACC,6LAAC;;0DACC,6LAAC;gDAAM,SAAQ;gDAAe,WAAU;0DAAmD;;;;;;0DAG3F,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;wDAAK,WAAU;kEACd,cAAA,6LAAC,iNAAA,CAAA,eAAY;4DAAC,WAAU;;;;;;;;;;;kEAE1B,6LAAC;wDACC,MAAK;wDACL,IAAG;wDACH,OAAO;wDACP,UAAU,CAAA,IAAK,gBAAgB,EAAE,MAAM,CAAC,KAAK;wDAC7C,WAAU;wDACV,KAAK,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAS/D;GAliBa;;QAKO,wIAAA,CAAA,UAAO;;;KALd","debugId":null}},
    {"offset": {"line": 2583, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/dashboard-doctor/Dashboard.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { PatientList } from './PatientList';\r\nimport { DiagnosisPanel } from './DiagnosisPanel';\r\nimport { getAllQueuesWithPatientInfo, updateQueueStatus, User, Queue } from '../datats/mockPatients';\r\nimport * as apiService from '../services/api.service';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\n// Interface cho thông tin bệnh nhân trong danh sách chờ\r\ninterface PatientInQueue {\r\n  _id: string; // ID của queue\r\n  patient: string; // ID của bệnh nhân\r\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled';\r\n  doctorId?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  patientInfo: User | null;\r\n}\r\n\r\nexport const Dashboard = () => {\r\n  const { token } = useAuth();\r\n  // State cho danh sách bệnh nhân đang chờ\r\n  const [patients, setPatients] = useState<PatientInQueue[]>([]);\r\n  // State cho bệnh nhân được chọn\r\n  const [selectedPatient, setSelectedPatient] = useState<PatientInQueue | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Lấy danh sách bệnh nhân đang chờ khi component mount và định kỳ mỗi 30 giây\r\n  useEffect(() => {\r\n    // Tải dữ liệu ngay lần đầu\r\n    loadPatients();\r\n    \r\n    // Thiết lập interval để tự động làm mới danh sách\r\n    const interval = setInterval(() => {\r\n      loadPatients();\r\n    }, 30000); // 30 giây\r\n    \r\n    // Xóa interval khi component unmount\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Hàm để tải danh sách bệnh nhân đang chờ\r\n  const loadPatients = async () => {\r\n    try {\r\n      console.log(\"Refreshing doctor's patient list...\");\r\n      // Lấy tất cả queue kèm thông tin bệnh nhân\r\n      const queues = await getAllQueuesWithPatientInfo();\r\n      // Lọc chỉ lấy những bệnh nhân đã được chuyển vào khám (status = 'in_progress')\r\n      const patientsInProgress = queues.filter(q => q.status === 'in_progress');\r\n      setPatients(patientsInProgress);\r\n    } catch (error) {\r\n      console.error(\"Error loading patients:\", error);\r\n    }\r\n  };\r\n\r\n  // Xử lý khi chọn bệnh nhân\r\n  const handleSelectPatient = (patient: PatientInQueue) => {\r\n    setSelectedPatient(patient);\r\n  };\r\n\r\n  // Xử lý khi hoàn thành khám bệnh nhân\r\n  const handleMarkAsDone = async (queueId: string) => {\r\n    setLoading(true);\r\n    try {\r\n      if (token) {\r\n        // Sử dụng API nếu có token\r\n        try {\r\n          // Cập nhật trạng thái queue thành 'completed' thông qua API\r\n          const response = await apiService.updateQueueStatus(\r\n            queueId,\r\n            token,\r\n            'completed'\r\n          );\r\n          console.log(\"Queue marked as completed via API:\", response);\r\n        } catch (apiError) {\r\n          console.error(\"API error marking queue as done:\", apiError);\r\n          // Fallback to mock function\r\n          await updateQueueStatus(queueId, 'completed');\r\n        }\r\n      } else {\r\n        // Sử dụng mock function nếu không có token\r\n        await updateQueueStatus(queueId, 'completed');\r\n      }\r\n      \r\n      // Tải lại danh sách bệnh nhân\r\n      await loadPatients();\r\n      // Bỏ chọn bệnh nhân hiện tại\r\n      setSelectedPatient(null);\r\n    } catch (error) {\r\n      console.error(\"Error marking patient as done:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Sắp xếp bệnh nhân theo thời gian chờ giảm dần\r\n  const sortedPatients = [...patients].sort((a, b) => {\r\n    const waitA = new Date().getTime() - new Date(a.createdAt).getTime();\r\n    const waitB = new Date().getTime() - new Date(b.createdAt).getTime();\r\n    return waitB - waitA;\r\n  });\r\n\r\n  return (\r\n    <div className=\"flex flex-col lg:flex-row w-full h-full gap-6\">\r\n      <div className=\"w-full lg:w-1/3 h-full\">\r\n        <PatientList \r\n          patients={sortedPatients} \r\n          onSelectPatient={handleSelectPatient} \r\n          selectedPatientId={selectedPatient ? selectedPatient._id : undefined} \r\n        />\r\n      </div>\r\n      <div className=\"w-full lg:w-2/3 h-full\">\r\n        <DiagnosisPanel \r\n          patient={selectedPatient?.patientInfo || null} \r\n          queueInfo={selectedPatient || null}\r\n          onMarkAsDone={handleMarkAsDone} \r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAPA;;;;;;;AAoBO,MAAM,YAAY;;IACvB,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,wIAAA,CAAA,UAAO,AAAD;IACxB,yCAAyC;IACzC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAoB,EAAE;IAC7D,gCAAgC;IAChC,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAyB;IAC9E,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,8EAA8E;IAC9E,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR,2BAA2B;YAC3B;YAEA,kDAAkD;YAClD,MAAM,WAAW;gDAAY;oBAC3B;gBACF;+CAAG,QAAQ,UAAU;YAErB,qCAAqC;YACrC;uCAAO,IAAM,cAAc;;QAC7B;8BAAG,EAAE;IAEL,0CAA0C;IAC1C,MAAM,eAAe;QACnB,IAAI;YACF,QAAQ,GAAG,CAAC;YACZ,2CAA2C;YAC3C,MAAM,SAAS,MAAM,CAAA,GAAA,uIAAA,CAAA,8BAA2B,AAAD;YAC/C,+EAA+E;YAC/E,MAAM,qBAAqB,OAAO,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK;YAC3D,YAAY;QACd,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2BAA2B;QAC3C;IACF;IAEA,2BAA2B;IAC3B,MAAM,sBAAsB,CAAC;QAC3B,mBAAmB;IACrB;IAEA,sCAAsC;IACtC,MAAM,mBAAmB,OAAO;QAC9B,WAAW;QACX,IAAI;YACF,IAAI,OAAO;gBACT,2BAA2B;gBAC3B,IAAI;oBACF,4DAA4D;oBAC5D,MAAM,WAAW,MAAM,CAAA,GAAA,2IAAA,CAAA,oBAA4B,AAAD,EAChD,SACA,OACA;oBAEF,QAAQ,GAAG,CAAC,sCAAsC;gBACpD,EAAE,OAAO,UAAU;oBACjB,QAAQ,KAAK,CAAC,oCAAoC;oBAClD,4BAA4B;oBAC5B,MAAM,CAAA,GAAA,uIAAA,CAAA,oBAAiB,AAAD,EAAE,SAAS;gBACnC;YACF,OAAO;gBACL,2CAA2C;gBAC3C,MAAM,CAAA,GAAA,uIAAA,CAAA,oBAAiB,AAAD,EAAE,SAAS;YACnC;YAEA,8BAA8B;YAC9B,MAAM;YACN,6BAA6B;YAC7B,mBAAmB;QACrB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kCAAkC;QAClD,SAAU;YACR,WAAW;QACb;IACF;IAEA,gDAAgD;IAChD,MAAM,iBAAiB;WAAI;KAAS,CAAC,IAAI,CAAC,CAAC,GAAG;QAC5C,MAAM,QAAQ,IAAI,OAAO,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;QAClE,MAAM,QAAQ,IAAI,OAAO,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;QAClE,OAAO,QAAQ;IACjB;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC,oJAAA,CAAA,cAAW;oBACV,UAAU;oBACV,iBAAiB;oBACjB,mBAAmB,kBAAkB,gBAAgB,GAAG,GAAG;;;;;;;;;;;0BAG/D,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC,uJAAA,CAAA,iBAAc;oBACb,SAAS,iBAAiB,eAAe;oBACzC,WAAW,mBAAmB;oBAC9B,cAAc;;;;;;;;;;;;;;;;;AAKxB;GArGa;;QACO,wIAAA,CAAA,UAAO;;;KADd","debugId":null}},
    {"offset": {"line": 2740, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/dashboard-doctor/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { useRouter } from 'next/navigation';\r\nimport { Header } from './Header';\r\nimport { Dashboard } from './Dashboard';\r\n\r\nexport default function DashboardDoctor() {\r\n  const { user, isAuthenticated } = useAuth();\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      router.push('/login');\r\n    }\r\n  }, [isAuthenticated, router]);\r\n\r\n  if (!isAuthenticated || !user) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col w-full min-h-screen bg-gray-50\">\r\n      <Header />\r\n      <main className=\"flex-1 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n        <Dashboard />\r\n      </main>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;;;AANA;;;;;;AAQe,SAAS;;IACtB,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,GAAG,CAAA,GAAA,wIAAA,CAAA,UAAO,AAAD;IACxC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACR,IAAI,CAAC,iBAAiB;gBACpB,OAAO,IAAI,CAAC;YACd;QACF;oCAAG;QAAC;QAAiB;KAAO;IAE5B,IAAI,CAAC,mBAAmB,CAAC,MAAM;QAC7B,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;;;;;;;;;;IAGrB;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,+IAAA,CAAA,SAAM;;;;;0BACP,6LAAC;gBAAK,WAAU;0BACd,cAAA,6LAAC,kJAAA,CAAA,YAAS;;;;;;;;;;;;;;;;AAIlB;GA1BwB;;QACY,wIAAA,CAAA,UAAO;QAC1B,qIAAA,CAAA,YAAS;;;KAFF","debugId":null}}]
}