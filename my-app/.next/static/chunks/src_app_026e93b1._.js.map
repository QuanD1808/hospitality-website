{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/dashboard-doctor/Header.tsx"],"sourcesContent":["import React from 'react';\nimport { UserCircleIcon, LogOutIcon } from 'lucide-react';\nimport { useAuth } from '../context/AuthContext';\nexport const Header = () => {\n  const {\n    user,\n    logout\n  } = useAuth();\n  const handleLogout = () => {\n    logout();\n  };\n  return <header className=\"bg-white shadow-sm border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <h1 className=\"text-xl font-bold text-blue-600\">MediClinic</h1>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"hidden md:flex items-center text-sm text-gray-800\">\n              <span className=\"font-bold text-gray-900\">{user?.fullName || user?.username}</span>\n              <span className=\"mx-2 text-gray-600\">|</span>\n              <span>{user?.specialization || user?.role}</span>\n            </div>\n            <div className=\"flex items-center\">\n              {/* <button className=\"p-1 rounded-full text-gray-600 hover:text-blue-600 focus:outline-none\">\n                <UserCircleIcon className=\"h-8 w-8\" />\n              </button> */}\n              <button onClick={handleLogout} className=\"ml-2 p-1 rounded-full text-gray-600 hover:text-red-600 focus:outline-none flex items-center cursor-pointer\">\n                <LogOutIcon className=\"h-5 w-5\" />\n                <span className=\"ml-1 text-sm hidden sm:inline\">Đăng xuất</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>;\n};"],"names":[],"mappings":";;;;AACA;AACA;;;;;AACO,MAAM,SAAS;;IACpB,MAAM,EACJ,IAAI,EACJ,MAAM,EACP,GAAG,CAAA,GAAA,wIAAA,CAAA,UAAO,AAAD;IACV,MAAM,eAAe;QACnB;IACF;IACA,qBAAO,6LAAC;QAAO,WAAU;kBACrB,cAAA,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAG,WAAU;0CAAkC;;;;;;;;;;;;;;;;kCAGpD,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAK,WAAU;kDAA2B,CAAA,iBAAA,2BAAA,KAAM,QAAQ,MAAI,iBAAA,2BAAA,KAAM,QAAQ;;;;;;kDAC3E,6LAAC;wCAAK,WAAU;kDAAqB;;;;;;kDACrC,6LAAC;kDAAM,CAAA,iBAAA,2BAAA,KAAM,cAAc,MAAI,iBAAA,2BAAA,KAAM,IAAI;;;;;;;;;;;;0CAE3C,6LAAC;gCAAI,WAAU;0CAIb,cAAA,6LAAC;oCAAO,SAAS;oCAAc,WAAU;;sDACvC,6LAAC,iNAAA,CAAA,aAAU;4CAAC,WAAU;;;;;;sDACtB,6LAAC;4CAAK,WAAU;sDAAgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOhE;GAnCa;;QAIP,wIAAA,CAAA,UAAO;;;KAJA","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/dashboard-doctor/PatientCard.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { ClockIcon, PhoneIcon } from 'lucide-react';\nimport { User } from '../datats/mockPatients';\n\n// Interface cho thông tin bệnh nhân trong hàng đợi\ninterface PatientInQueue {\n  _id: string;\n  patient: string;\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled';\n  doctorId?: string;\n  createdAt: string;\n  updatedAt: string;\n  __v?: number;\n  patientInfo: User | null;\n}\n\ninterface PatientCardProps {\n  patientInQueue: PatientInQueue;\n  isSelected: boolean;\n  onSelect: () => void;\n}\n\nexport const PatientCard: React.FC<PatientCardProps> = ({\n  patientInQueue,\n  isSelected,\n  onSelect\n}) => {\n  // Lấy thông tin người dùng từ patientInQueue\n  const patient = patientInQueue.patientInfo;\n  \n  if (!patient) {\n    return null; // Không hiển thị nếu không có thông tin người dùng\n  }\n  \n  const [waitingTime, setWaitingTime] = useState(() => \n    Math.floor((new Date().getTime() - new Date(patientInQueue.createdAt).getTime()) / 60000)\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setWaitingTime(Math.floor((new Date().getTime() - new Date(patientInQueue.createdAt).getTime()) / 60000));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [patientInQueue.createdAt]);\n\n  const formatPhoneNumber = (phone: string) => {\n    if (phone.startsWith('+84')) {\n      return phone.replace(/(\\+84)(\\d{3})(\\d{3})(\\d{3})/, '$1 $2 $3 $4');\n    }\n    return phone.replace(/(\\d{4})(\\d{3})(\\d{3})/, '$1 $2 $3');\n  };\n\n  return <div className={`p-4 cursor-pointer transition-colors ${isSelected ? 'bg-blue-50 border-l-4 border-blue-500' : 'hover:bg-gray-50'}`} onClick={onSelect}>\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex-1\">\n          <h3 className=\"text-base font-semibold text-gray-900\">{patient.fullName}</h3>\n          {/* Trong User mockPatients không có age và gender nên hiển thị thông tin có sẵn */}\n          <p className=\"text-sm text-gray-800\">\n            {patient.role} • {new Date(patientInQueue.createdAt).toLocaleDateString()}\n          </p>\n          <div className=\"flex items-center text-sm text-gray-800 mt-1\">\n            <PhoneIcon className=\"h-3 w-3 mr-1\" />\n            {formatPhoneNumber(patient.phone)}\n          </div>\n          <p className=\"text-sm text-gray-800 mt-1\">{patient.email}</p>\n        </div>\n        <div className=\"flex flex-col items-end\">\n          <div className=\"flex items-center mt-1 text-sm text-gray-900 font-medium\">\n            <ClockIcon className=\"h-4 w-4 mr-1\" />\n            <span>Đợi: {waitingTime} phút</span>\n          </div>\n        </div>\n      </div>\n    </div>;\n};"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;;;AAHA;;;AAwBO,MAAM,cAA0C;QAAC,EACtD,cAAc,EACd,UAAU,EACV,QAAQ,EACT;;IACC,6CAA6C;IAC7C,MAAM,UAAU,eAAe,WAAW;IAE1C,IAAI,CAAC,SAAS;QACZ,OAAO,MAAM,mDAAmD;IAClE;IAEA,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD;gCAAE,IAC7C,KAAK,KAAK,CAAC,CAAC,IAAI,OAAO,OAAO,KAAK,IAAI,KAAK,eAAe,SAAS,EAAE,OAAO,EAAE,IAAI;;IAGrF,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACR,MAAM,WAAW;kDAAY;oBAC3B,eAAe,KAAK,KAAK,CAAC,CAAC,IAAI,OAAO,OAAO,KAAK,IAAI,KAAK,eAAe,SAAS,EAAE,OAAO,EAAE,IAAI;gBACpG;iDAAG;YACH;yCAAO,IAAM,cAAc;;QAC7B;gCAAG;QAAC,eAAe,SAAS;KAAC;IAE7B,MAAM,oBAAoB,CAAC;QACzB,IAAI,MAAM,UAAU,CAAC,QAAQ;YAC3B,OAAO,MAAM,OAAO,CAAC,+BAA+B;QACtD;QACA,OAAO,MAAM,OAAO,CAAC,yBAAyB;IAChD;IAEA,qBAAO,6LAAC;QAAI,WAAW,AAAC,wCAAiH,OAA1E,aAAa,0CAA0C;QAAsB,SAAS;kBACjJ,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAAyC,QAAQ,QAAQ;;;;;;sCAEvE,6LAAC;4BAAE,WAAU;;gCACV,QAAQ,IAAI;gCAAC;gCAAI,IAAI,KAAK,eAAe,SAAS,EAAE,kBAAkB;;;;;;;sCAEzE,6LAAC;4BAAI,WAAU;;8CACb,6LAAC,2MAAA,CAAA,YAAS;oCAAC,WAAU;;;;;;gCACpB,kBAAkB,QAAQ,KAAK;;;;;;;sCAElC,6LAAC;4BAAE,WAAU;sCAA8B,QAAQ,KAAK;;;;;;;;;;;;8BAE1D,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,2MAAA,CAAA,YAAS;gCAAC,WAAU;;;;;;0CACrB,6LAAC;;oCAAK;oCAAM;oCAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKpC;GApDa;KAAA","debugId":null}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/dashboard-doctor/PatientList.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { PatientCard } from './PatientCard';\nimport { User } from '../datats/mockPatients';\n\n// Interface cho thông tin bệnh nhân trong hàng đợi\ninterface PatientInQueue {\n  _id: string; // ID của queue\n  patient: string; // ID của bệnh nhân\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled';\n  doctorId?: string;\n  createdAt: string;\n  updatedAt: string;\n  __v?: number;\n  patientInfo: User | null;\n}\n\ninterface PatientListProps {\n  patients: PatientInQueue[];\n  onSelectPatient: (patient: PatientInQueue) => void;\n  selectedPatientId?: string;\n}\n\nexport const PatientList: React.FC<PatientListProps> = ({\n  patients,\n  onSelectPatient,\n  selectedPatientId\n}) => {\n  return (\n    <div className=\"bg-white rounded-lg shadow-md h-full\">\n      <div className=\"p-4 border-b border-gray-200 flex items-center justify-between\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">Danh sách bệnh nhân của bạn</h2>\n        <span className=\"bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n          {patients.length} bệnh nhân\n        </span>\n      </div>\n      <div className=\"p-4 overflow-y-auto\" style={{ maxHeight: 'calc(100vh - 200px)' }}>\n        {patients.length === 0 ? (\n          <div className=\"text-center text-gray-700 py-8\">\n            <svg className=\"w-12 h-12 mx-auto text-gray-400 mb-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n            </svg>\n            <p className=\"text-base\">Không có bệnh nhân nào được gán cho bạn</p>\n            <p className=\"text-xs text-gray-500 mt-1\">Các bệnh nhân sẽ được tiếp tân chuyển đến bạn</p>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            {patients.map((patient, idx) => (\n              <div key={patient._id} className={idx === 0 ? '' : 'opacity-50 pointer-events-none'}>\n                <PatientCard\n                  patientInQueue={patient}\n                  isSelected={selectedPatientId === patient._id}\n                  onSelect={() => idx === 0 && onSelectPatient(patient)}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAwBO,MAAM,cAA0C;QAAC,EACtD,QAAQ,EACR,eAAe,EACf,iBAAiB,EAClB;IACC,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAsC;;;;;;kCACpD,6LAAC;wBAAK,WAAU;;4BACb,SAAS,MAAM;4BAAC;;;;;;;;;;;;;0BAGrB,6LAAC;gBAAI,WAAU;gBAAsB,OAAO;oBAAE,WAAW;gBAAsB;0BAC5E,SAAS,MAAM,KAAK,kBACnB,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;4BAAuC,MAAK;4BAAO,QAAO;4BAAe,SAAQ;4BAAY,OAAM;sCAChH,cAAA,6LAAC;gCAAK,eAAc;gCAAQ,gBAAe;gCAAQ,aAAY;gCAAI,GAAE;;;;;;;;;;;sCAEvE,6LAAC;4BAAE,WAAU;sCAAY;;;;;;sCACzB,6LAAC;4BAAE,WAAU;sCAA6B;;;;;;;;;;;6EAG5C,6LAAC;oBAAI,WAAU;8BACZ,SAAS,GAAG,CAAC,CAAC,SAAS,oBACtB,6LAAC;4BAAsB,WAAW,QAAQ,IAAI,KAAK;sCACjD,cAAA,6LAAC,oJAAA,CAAA,cAAW;gCACV,gBAAgB;gCAChB,YAAY,sBAAsB,QAAQ,GAAG;gCAC7C,UAAU,IAAM,QAAQ,KAAK,gBAAgB;;;;;;2BAJvC,QAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;AAanC;KAtCa","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/dashboard-doctor/MedicineEntry.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Medicine as AuthMedicine } from '../datats/auth';\nimport { TrashIcon, ChevronDownIcon } from 'lucide-react';\nimport * as apiService from '../services/api.service';\nimport { useAuth } from '../context/AuthContext';\n\ninterface MedicineEntryProps {\n  medicine: AuthMedicine;\n  onUpdate: (medicine: AuthMedicine) => void;\n  onRemove: (id: string) => void;\n}\n\nexport const MedicineEntry: React.FC<MedicineEntryProps> = ({\n  medicine,\n  onUpdate,\n  onRemove\n}) => {\n  // State để lưu thông tin đơn thuốc\n  const [name, setName] = useState(medicine.name);\n  const [totalPills, setTotalPills] = useState(medicine.totalPills ? medicine.totalPills.toString() : '0');\n  const [schedule, setSchedule] = useState(medicine.schedule || '');\n  \n  // State để quản lý dropdown\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [availableMedicines, setAvailableMedicines] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { token } = useAuth();\n  \n  // Lấy danh sách thuốc từ API\n  useEffect(() => {\n    const fetchMedicines = async () => {\n      setIsLoading(true);\n      try {\n        if (token) {\n          const medicines = await apiService.getMedicines(token);\n          setAvailableMedicines(medicines);\n        }\n      } catch (error) {\n        console.error(\"Error fetching medicines:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    fetchMedicines();\n  }, [token]);\n\n  // Xử lý khi chọn một loại thuốc từ danh sách\n  const handleSelectMedicine = (selectedMedicine: any) => {\n    setName(selectedMedicine.name);\n    setIsDropdownOpen(false);\n    \n    // Cập nhật thông tin thuốc\n    const updatedMedicine = {\n      ...medicine,\n      name: selectedMedicine.name,\n      totalPills: parseInt(totalPills) || 0,\n      schedule,\n      medicineId: selectedMedicine._id\n    };\n    \n    onUpdate(updatedMedicine);\n  };\n  \n  // Cập nhật thông tin thuốc khi thay đổi số lượng và cách dùng\n  const handlePillsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    setTotalPills(newValue);\n    \n    onUpdate({\n      ...medicine,\n      name,\n      totalPills: parseInt(newValue) || 0,\n      schedule\n    });\n  };\n  \n  const handleScheduleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    setSchedule(newValue);\n    \n    onUpdate({\n      ...medicine,\n      name,\n      totalPills: parseInt(totalPills) || 0,\n      schedule: newValue\n    });\n  };\n\n  return (\n    <div className=\"bg-gray-100 p-4 rounded-lg shadow-sm border border-gray-200\">\n      <div className=\"grid grid-cols-12 gap-4 items-center\">\n        <div className=\"col-span-3\">\n          <label htmlFor={`medicine-name-${medicine.id}`} className=\"block text-sm font-medium text-gray-800 mb-1\">\n            Tên thuốc\n          </label>\n          <div className=\"relative\" id={`medicine-dropdown-${medicine.id}`}>\n            <div \n              className=\"flex justify-between items-center w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 bg-white focus-within:border-blue-500 focus-within:ring-1 focus-within:ring-blue-500 cursor-pointer\"\n              onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n            >\n              <input \n                type=\"text\"\n                id={`medicine-name-${medicine.id}`}\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"Chọn thuốc...\"\n                className=\"border-none outline-none focus:ring-0 p-0 w-full text-base text-gray-800\"\n                readOnly\n              />\n              <ChevronDownIcon className=\"h-5 w-5 text-gray-600\" />\n            </div>\n            \n            {isDropdownOpen && (\n              <div className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base overflow-auto focus:outline-none border border-gray-200\">\n                {isLoading ? (\n                  <div className=\"px-3 py-4 text-sm text-gray-600 text-center\">Đang tải...</div>\n                ) : availableMedicines.length === 0 ? (\n                  <div className=\"px-3 py-2 text-sm text-gray-600\">Không có thuốc</div>\n                ) : (\n                  availableMedicines.map(med => (\n                    <div\n                      key={med._id}\n                      className=\"px-3 py-2 cursor-pointer hover:bg-blue-50 text-sm text-gray-800\"\n                      onClick={() => handleSelectMedicine(med)}\n                    >\n                      {med.name} - <span>{med.price}đ/viên</span>\n                    </div>\n                  ))\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"col-span-3\">\n          <label htmlFor={`medicine-total-${medicine.id}`} className=\"block text-sm font-medium text-gray-800 mb-1\">\n            Tổng số viên\n          </label>\n          <input\n            type=\"number\"\n            id={`medicine-total-${medicine.id}`}\n            value={totalPills}\n            min={0}\n            onChange={handlePillsChange}\n            placeholder=\"0\"\n            className=\"block w-full rounded-md border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base text-gray-800 placeholder-gray-400 px-3 py-2\"\n          />\n        </div>\n        <div className=\"col-span-5\">\n          <label htmlFor={`medicine-schedule-${medicine.id}`} className=\"block text-sm font-medium text-gray-800 mb-1\">\n            Lịch uống hàng ngày\n          </label>\n          <input\n            type=\"text\"\n            id={`medicine-schedule-${medicine.id}`}\n            value={schedule}\n            onChange={handleScheduleChange}\n            placeholder=\"VD: 1 sáng, 2 trưa, 1 tối\"\n            className=\"block w-full rounded-md border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base text-gray-800 placeholder-gray-400 px-3 py-2\"\n          />\n        </div>\n        <div className=\"col-span-1 flex items-end justify-end h-full\">\n          <button\n            type=\"button\"\n            onClick={() => onRemove(medicine.id)}\n            className=\"p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 rounded-md transition-colors\"\n            aria-label=\"Xóa thuốc\"\n          >\n            <TrashIcon className=\"h-5 w-5\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};"],"names":[],"mappings":";;;;AAEA;AAEA;AAAA;AACA;AACA;;;AANA;;;;;AAcO,MAAM,gBAA8C;QAAC,EAC1D,QAAQ,EACR,QAAQ,EACR,QAAQ,EACT;;IACC,mCAAmC;IACnC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,SAAS,IAAI;IAC9C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,SAAS,UAAU,GAAG,SAAS,UAAU,CAAC,QAAQ,KAAK;IACpG,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,SAAS,QAAQ,IAAI;IAE9D,4BAA4B;IAC5B,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAS,EAAE;IACtE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,wIAAA,CAAA,UAAO,AAAD;IAExB,6BAA6B;IAC7B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,MAAM;0DAAiB;oBACrB,aAAa;oBACb,IAAI;wBACF,IAAI,OAAO;4BACT,MAAM,YAAY,MAAM,2IAAA,CAAA,eAAuB,CAAC;4BAChD,sBAAsB;wBACxB;oBACF,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,6BAA6B;oBAC7C,SAAU;wBACR,aAAa;oBACf;gBACF;;YAEA;QACF;kCAAG;QAAC;KAAM;IAEV,6CAA6C;IAC7C,MAAM,uBAAuB,CAAC;QAC5B,QAAQ,iBAAiB,IAAI;QAC7B,kBAAkB;QAElB,2BAA2B;QAC3B,MAAM,kBAAkB;YACtB,GAAG,QAAQ;YACX,MAAM,iBAAiB,IAAI;YAC3B,YAAY,SAAS,eAAe;YACpC;YACA,YAAY,iBAAiB,GAAG;QAClC;QAEA,SAAS;IACX;IAEA,8DAA8D;IAC9D,MAAM,oBAAoB,CAAC;QACzB,MAAM,WAAW,EAAE,MAAM,CAAC,KAAK;QAC/B,cAAc;QAEd,SAAS;YACP,GAAG,QAAQ;YACX;YACA,YAAY,SAAS,aAAa;YAClC;QACF;IACF;IAEA,MAAM,uBAAuB,CAAC;QAC5B,MAAM,WAAW,EAAE,MAAM,CAAC,KAAK;QAC/B,YAAY;QAEZ,SAAS;YACP,GAAG,QAAQ;YACX;YACA,YAAY,SAAS,eAAe;YACpC,UAAU;QACZ;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAM,SAAS,AAAC,iBAA4B,OAAZ,SAAS,EAAE;4BAAI,WAAU;sCAA+C;;;;;;sCAGzG,6LAAC;4BAAI,WAAU;4BAAW,IAAI,AAAC,qBAAgC,OAAZ,SAAS,EAAE;;8CAC5D,6LAAC;oCACC,WAAU;oCACV,SAAS,IAAM,kBAAkB,CAAC;;sDAElC,6LAAC;4CACC,MAAK;4CACL,IAAI,AAAC,iBAA4B,OAAZ,SAAS,EAAE;4CAChC,OAAO;4CACP,UAAU,CAAC,IAAM,QAAQ,EAAE,MAAM,CAAC,KAAK;4CACvC,aAAY;4CACZ,WAAU;4CACV,QAAQ;;;;;;sDAEV,6LAAC,2NAAA,CAAA,kBAAe;4CAAC,WAAU;;;;;;;;;;;;gCAG5B,gCACC,6LAAC;oCAAI,WAAU;8CACZ,0BACC,6LAAC;wCAAI,WAAU;kDAA8C;;;;;mFAC3D,mBAAmB,MAAM,KAAK,kBAChC,6LAAC;wCAAI,WAAU;kDAAkC;;;;;mFAEjD,mBAAmB,GAAG,CAAC,CAAA,oBACrB,6LAAC;4CAEC,WAAU;4CACV,SAAS,IAAM,qBAAqB;;gDAEnC,IAAI,IAAI;gDAAC;8DAAG,6LAAC;;wDAAM,IAAI,KAAK;wDAAC;;;;;;;;2CAJzB,IAAI,GAAG;;;;;;;;;;;;;;;;;;;;;;8BAY1B,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAM,SAAS,AAAC,kBAA6B,OAAZ,SAAS,EAAE;4BAAI,WAAU;sCAA+C;;;;;;sCAG1G,6LAAC;4BACC,MAAK;4BACL,IAAI,AAAC,kBAA6B,OAAZ,SAAS,EAAE;4BACjC,OAAO;4BACP,KAAK;4BACL,UAAU;4BACV,aAAY;4BACZ,WAAU;;;;;;;;;;;;8BAGd,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAM,SAAS,AAAC,qBAAgC,OAAZ,SAAS,EAAE;4BAAI,WAAU;sCAA+C;;;;;;sCAG7G,6LAAC;4BACC,MAAK;4BACL,IAAI,AAAC,qBAAgC,OAAZ,SAAS,EAAE;4BACpC,OAAO;4BACP,UAAU;4BACV,aAAY;4BACZ,WAAU;;;;;;;;;;;;8BAGd,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBACC,MAAK;wBACL,SAAS,IAAM,SAAS,SAAS,EAAE;wBACnC,WAAU;wBACV,cAAW;kCAEX,cAAA,6LAAC,2MAAA,CAAA,YAAS;4BAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMjC;GAlKa;;QAcO,wIAAA,CAAA,UAAO;;;KAdd","debugId":null}},
    {"offset": {"line": 765, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/dashboard-doctor/PatientProfile.tsx"],"sourcesContent":["import React from 'react';\nimport { PhoneIcon, MapPinIcon, MailIcon, UserIcon } from 'lucide-react';\nimport { User } from '../datats/mockPatients';\n\ntype PatientProfileProps = {\n  patient: User | null;\n};\nexport const PatientProfile = ({\n  patient\n}: PatientProfileProps) => {\n  const formatPhoneNumber = (phone: string) => {\n    // Format Vietnamese phone number: 0912 345 678 or +84 912 345 678\n    if (phone.startsWith('+84')) {\n      return phone.replace(/(\\+84)(\\d{3})(\\d{3})(\\d{3})/, '$1 $2 $3 $4');\n    }\n    return phone.replace(/(\\d{4})(\\d{3})(\\d{3})/, '$1 $2 $3');\n  };\n  if (!patient) {\n    return <div className=\"p-4 bg-gray-50 rounded-lg text-gray-500 text-sm\">Không có thông tin bệnh nhân</div>;\n  }\n  \n  return <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center text-sm text-gray-800\">\n          <UserIcon className=\"h-4 w-4 mr-2 text-gray-600\" />\n          <div>\n            <span className=\"font-medium\">ID:</span> {patient.userId}\n          </div>\n        </div>\n        <div className=\"flex items-center text-sm text-gray-800\">\n          <PhoneIcon className=\"h-4 w-4 mr-2 text-gray-600\" />\n          <div>\n            <span className=\"font-medium\">Số điện thoại:</span>{' '}\n            <a href={`tel:${patient.phone}`} className=\"text-blue-600 hover:text-blue-800\">\n              {formatPhoneNumber(patient.phone)}\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"space-y-3\">\n        <div className=\"flex items-start text-sm text-gray-800\">\n          <MailIcon className=\"h-4 w-4 mr-2 mt-1 text-gray-600 flex-shrink-0\" />\n          <div>\n            <span className=\"font-medium\">Email:</span>{' '}\n            <a href={`mailto:${patient.email}`} className=\"text-blue-600 hover:text-blue-800\">\n              {patient.email}\n            </a>\n          </div>\n        </div>\n        <div className=\"flex items-start text-sm text-gray-800\">\n          <MapPinIcon className=\"h-4 w-4 mr-2 mt-1 text-gray-600 flex-shrink-0\" />\n          <div>\n            <span className=\"font-medium\">Ngày tạo:</span> {new Date(patient.createdAt).toLocaleDateString()}\n          </div>\n        </div>\n      </div>\n    </div>;\n};"],"names":[],"mappings":";;;;AACA;AAAA;AAAA;AAAA;;;AAMO,MAAM,iBAAiB;QAAC,EAC7B,OAAO,EACa;IACpB,MAAM,oBAAoB,CAAC;QACzB,kEAAkE;QAClE,IAAI,MAAM,UAAU,CAAC,QAAQ;YAC3B,OAAO,MAAM,OAAO,CAAC,+BAA+B;QACtD;QACA,OAAO,MAAM,OAAO,CAAC,yBAAyB;IAChD;IACA,IAAI,CAAC,SAAS;QACZ,qBAAO,6LAAC;YAAI,WAAU;sBAAkD;;;;;;IAC1E;IAEA,qBAAO,6LAAC;QAAI,WAAU;;0BAClB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,yMAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;0CACpB,6LAAC;;kDACC,6LAAC;wCAAK,WAAU;kDAAc;;;;;;oCAAU;oCAAE,QAAQ,MAAM;;;;;;;;;;;;;kCAG5D,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,2MAAA,CAAA,YAAS;gCAAC,WAAU;;;;;;0CACrB,6LAAC;;kDACC,6LAAC;wCAAK,WAAU;kDAAc;;;;;;oCAAsB;kDACpD,6LAAC;wCAAE,MAAM,AAAC,OAAoB,OAAd,QAAQ,KAAK;wCAAI,WAAU;kDACxC,kBAAkB,QAAQ,KAAK;;;;;;;;;;;;;;;;;;;;;;;;0BAKxC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,yMAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;0CACpB,6LAAC;;kDACC,6LAAC;wCAAK,WAAU;kDAAc;;;;;;oCAAc;kDAC5C,6LAAC;wCAAE,MAAM,AAAC,UAAuB,OAAd,QAAQ,KAAK;wCAAI,WAAU;kDAC3C,QAAQ,KAAK;;;;;;;;;;;;;;;;;;kCAIpB,6LAAC;wBAAI,WAAU;;0CACb,6LAAC,iNAAA,CAAA,aAAU;gCAAC,WAAU;;;;;;0CACtB,6LAAC;;kDACC,6LAAC;wCAAK,WAAU;kDAAc;;;;;;oCAAgB;oCAAE,IAAI,KAAK,QAAQ,SAAS,EAAE,kBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;AAK1G;KAlDa","debugId":null}},
    {"offset": {"line": 986, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/dashboard-doctor/DiagnosisPanel.tsx"],"sourcesContent":["'use client';\n\n/**\n * DiagnosisPanel - Component cho bác sĩ để khám và kê đơn thuốc\n * \n * Luồng hoạt động:\n * 1. Bác sĩ nhận bệnh nhân từ hàng đợi (queue)\n * 2. Nhập chẩn đoán và chọn thuốc\n * 3. Tạo đơn thuốc (prescription) với trạng thái \"PENDING_DISPENSE\"\n * 4. Tạo chi tiết đơn thuốc (prescriptionDetails) cho mỗi loại thuốc\n * 5. Cập nhật trạng thái queue thành \"completed\"\n * \n * Mô hình dữ liệu MongoDB:\n * - Prescription: {_id, customPrescriptionId, patientId, doctorId, diagnosis, date, status}\n * - PrescriptionDetail: {_id, customPrescriptionDetailId, prescriptionId, medicineId, quantity, dosage}\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { FileTextIcon, ClipboardListIcon, CalendarIcon, PlusIcon, UserIcon } from 'lucide-react';\nimport { MedicineEntry } from './MedicineEntry';\nimport { User } from '../datats/mockPatients';\nimport { Medicine } from '../datats/auth';\nimport { PatientProfile } from './PatientProfile';\nimport * as apiService from '../services/api.service';\nimport { useAuth } from '../context/AuthContext';\n\n// Interface cho thông tin bệnh nhân trong hàng đợi\ninterface PatientInQueue {\n  _id: string;\n  patient: string | { _id: string; [key: string]: any };\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled';\n  doctorId?: string | { _id: string; [key: string]: any };\n  createdAt: string;\n  updatedAt: string;\n  __v?: number;\n  patientInfo: User | null;\n}\n\ninterface DiagnosisPanelProps {\n  patient: User | null;\n  queueInfo: PatientInQueue | null;\n  onMarkAsDone: (queueId: string) => void;\n}\n\nexport const DiagnosisPanel: React.FC<DiagnosisPanelProps> = ({\n  patient,\n  queueInfo,\n  onMarkAsDone\n}) => {\n  const { token } = useAuth();\n  const [diagnosis, setDiagnosis] = useState('');\n  const [prescription, setPrescription] = useState<Medicine[]>([]);\n  const [followUp, setFollowUp] = useState(false);\n  const [followUpDate, setFollowUpDate] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Reset form fields when patient changes\n    setDiagnosis('');\n    setPrescription([]);\n    setFollowUp(false);\n    setFollowUpDate('');\n    setError(null);\n    setSuccessMessage(null);\n  }, [patient]);\n\n  const canComplete = diagnosis.trim() !== '' && prescription.length > 0 && !loading;\n\n  const handleSave = async (e: React.FormEvent | React.MouseEvent | null = null) => {\n    // Prevent form submission if called from a form submit event\n    if (e && 'preventDefault' in e) e.preventDefault();\n    if (!patient || !queueInfo) return;\n    \n    // Validate before saving\n    if (!diagnosis.trim()) {\n      setError('Vui lòng nhập chẩn đoán');\n      return;\n    }\n    if (prescription.length === 0) {\n      setError('Vui lòng thêm ít nhất một loại thuốc');\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    setSuccessMessage(null);\n    \n    try {\n      if (!token) {\n        throw new Error('Không có token xác thực');\n      }\n      \n      // Format current date to YYYY-MM-DD\n      const today = new Date().toISOString().split('T')[0];\n      \n      // 1. Tạo ID cho đơn thuốc với định dạng PRESC-YYYYMMDD-XXXX\n      const dateStr = today.replace(/-/g, '');\n      const customPrescriptionId = `PRESC-${dateStr}-${Date.now().toString().slice(-4)}`;\n      \n      // Xác định patientId và doctorId\n      let patientId;\n      let doctorId;\n      \n      // Lấy patientId từ queueInfo\n      if (typeof queueInfo.patient === 'string') {\n        patientId = queueInfo.patient;\n      } else if (queueInfo.patient && queueInfo.patient._id) {\n        patientId = queueInfo.patient._id;\n      } else {\n        throw new Error('Dữ liệu bệnh nhân không hợp lệ');\n      }\n      \n      // Lấy doctorId từ queueInfo hoặc localStorage\n      if (queueInfo.doctorId) {\n        if (typeof queueInfo.doctorId === 'string') {\n          doctorId = queueInfo.doctorId;\n        } else if (queueInfo.doctorId._id) {\n          doctorId = queueInfo.doctorId._id;\n        }\n      } else {\n        const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n        doctorId = currentUser?._id;\n      }\n      \n      if (!doctorId) {\n        throw new Error('Thiếu thông tin bác sĩ');\n      }\n      \n      // 2. Tạo đơn thuốc (Prescription)\n      const prescriptionData = {\n        customPrescriptionId,\n        patientId,\n        doctorId,\n        diagnosis,\n        date: today,\n        status: 'PENDING_DISPENSE'\n      };\n      \n      console.log('Tạo đơn thuốc với data:', prescriptionData);\n      \n      // Gọi API để tạo đơn thuốc trong MongoDB\n      const createdPrescription = await apiService.createPrescription(prescriptionData, token);\n      console.log('Đơn thuốc đã được tạo:', createdPrescription);\n      \n      // 3. Tạo chi tiết đơn thuốc (PrescriptionDetail)\n      const prescriptionDetails = prescription\n        .filter(med => med.name && med.totalPills)\n        .map(med => {\n          // Tạo ID cho chi tiết đơn thuốc\n          const timestamp = Date.now().toString().slice(-8);\n          const randomSuffix = Math.floor(Math.random() * 9000 + 1000).toString();\n          const customPrescriptionDetailId = `PRESCD-${timestamp}-${randomSuffix}`;\n          \n          // Lấy medicineId (MongoDB ID của thuốc)\n          const medicineId = (med as any).medicineId || med.id;\n          \n          return {\n            customPrescriptionDetailId,\n            medicineId,\n            quantity: med.totalPills,\n            dosage: med.schedule || 'Dùng theo chỉ dẫn của bác sĩ'\n          };\n        });\n      \n      // Gọi API để tạo chi tiết đơn thuốc\n      if (prescriptionDetails.length > 0) {\n        console.log('Tạo chi tiết đơn thuốc:', prescriptionDetails);\n        await apiService.createBatchPrescriptionDetails(\n          createdPrescription._id,\n          prescriptionDetails,\n          token\n        );\n      }\n      \n      // 4. Cập nhật trạng thái queue thành 'completed'\n      onMarkAsDone(queueInfo._id);\n      \n      // Hiển thị thông báo thành công\n      setSuccessMessage(`Đã tạo đơn thuốc ${customPrescriptionId} thành công cho bệnh nhân ${patient.fullName}!`);\n      \n      // Reset form\n      setDiagnosis('');\n      setPrescription([]);\n      setFollowUp(false);\n      setFollowUpDate('');\n      \n    } catch (error: any) {\n      console.error('Error creating prescription:', error);\n      setError(`Lỗi khi tạo đơn thuốc: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddMedicine = () => {\n    // Tạo thuốc mới\n    const newMedicine: Medicine = {\n      id: Date.now().toString(),\n      name: '',\n      totalPills: 0,\n      schedule: ''\n    };\n    setPrescription([...prescription, newMedicine]);\n  };\n\n  const handleUpdateMedicine = (updatedMedicine: Medicine) => {\n    setPrescription(prescription.map(med => \n      med.id === updatedMedicine.id ? updatedMedicine : med\n    ));\n  };\n\n  const handleRemoveMedicine = (medicineId: string) => {\n    setPrescription(prescription.filter(med => med.id !== medicineId));\n  };\n\n  if (!patient) {\n    return (\n      <div className=\"bg-white rounded-lg shadow-md h-full flex items-center justify-center p-8\">\n        <div className=\"text-center\">\n          <FileTextIcon className=\"mx-auto h-12 w-12 text-gray-600\" />\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n            Chưa chọn bệnh nhân\n          </h3>\n          <p className=\"mt-1 text-sm text-gray-700\">\n            Vui lòng chọn bệnh nhân từ danh sách chờ để bắt đầu khám\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md h-full\">\n      <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-lg font-medium text-gray-900\">{patient?.fullName || 'Không có tên'}</h2>\n          <p className=\"text-sm text-gray-500\">\n            {patient?.email} • {patient?.phone}\n          </p>\n        </div>\n        <button\n          onClick={() => handleSave(null)}\n          disabled={!canComplete || loading}\n          className={`px-4 py-2 text-sm font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors ${\n            loading ? 'bg-gray-400 text-white cursor-not-allowed' :\n            canComplete ? 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500 cursor-pointer' : \n            'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {loading ? 'Đang xử lý...' : 'Hoàn thành khám'}\n        </button>\n      </div>\n      \n      <div className=\"p-4 overflow-y-auto space-y-6\" style={{ maxHeight: 'calc(100vh - 250px)' }}>\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-100 border border-red-300 rounded text-red-700 font-medium\">{error}</div>\n        )}\n        \n        {successMessage && (\n          <div className=\"mb-4 p-4 bg-green-100 border border-green-300 rounded text-green-700\">\n            <h4 className=\"font-bold mb-2\">Thành công!</h4>\n            <p>{successMessage}</p>\n          </div>\n        )}\n        \n        <div>\n          <h3 className=\"text-sm font-medium text-gray-900 flex items-center mb-3\">\n            <UserIcon className=\"h-4 w-4 mr-2 text-blue-500\" />\n            Thông tin bệnh nhân\n          </h3>\n          <PatientProfile patient={patient} />\n        </div>\n        \n        <form onSubmit={(e) => handleSave(e)} className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"diagnosis\" className=\"block text-base font-semibold text-gray-900\">\n              Chẩn đoán\n            </label>\n            <textarea\n              id=\"diagnosis\"\n              value={diagnosis}\n              onChange={(e) => setDiagnosis(e.target.value)}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-600 focus:ring-blue-600 text-base text-gray-900 placeholder-gray-500\"\n              rows={3}\n              placeholder=\"Nhập thông tin chẩn đoán chi tiết cho bệnh nhân...\"\n            />\n          </div>\n\n          <div>\n            <div className=\"flex justify-between items-center mb-4\">\n              <label className=\"block text-base font-semibold text-gray-900\">\n                Đơn thuốc\n              </label>\n              <button\n                type=\"button\"\n                onClick={handleAddMedicine}\n                className=\"inline-flex items-center px-4 py-2 border border-transparent text-base font-semibold rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer\"\n              >\n                <PlusIcon className=\"h-4 w-4 mr-1\" />\n                Thêm thuốc\n              </button>\n            </div>\n            <div className=\"space-y-4\">\n              {prescription.map((medicine) => (\n                <MedicineEntry\n                  key={medicine.id}\n                  medicine={medicine}\n                  onUpdate={handleUpdateMedicine}\n                  onRemove={handleRemoveMedicine}\n                />\n              ))}\n              {prescription.length === 0 && (\n                <div className=\"text-center p-4 bg-gray-50 text-gray-500 rounded-md\">\n                  Chưa có thuốc nào được thêm vào đơn\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex items-center mb-2\">\n              <input\n                id=\"followUp\"\n                type=\"checkbox\"\n                checked={followUp}\n                onChange={e => setFollowUp(e.target.checked)}\n                className=\"focus:ring-blue-500 h-5 w-5 text-blue-600 border-gray-300 rounded cursor-pointer\"\n              />\n              <label htmlFor=\"followUp\" className=\"ml-2 block text-base font-semibold text-gray-900 cursor-pointer select-none\">\n                Đặt lịch tái khám\n              </label>\n            </div>\n            {followUp && (\n              <div>\n                <label htmlFor=\"followUpDate\" className=\"block text-base font-semibold text-gray-900 mb-1\">\n                  Ngày tái khám\n                </label>\n                <div className=\"relative\">\n                  <span className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <CalendarIcon className=\"h-5 w-5 text-gray-400\" />\n                  </span>\n                  <input\n                    type=\"date\"\n                    id=\"followUpDate\"\n                    value={followUpDate}\n                    onChange={e => setFollowUpDate(e.target.value)}\n                    className=\"block w-full pl-10 rounded-md border-gray-300 shadow-sm focus:border-blue-600 focus:ring-blue-600 text-base text-gray-900\"\n                    min={new Date().toISOString().split('T')[0]}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1554, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/datats/mockPatients.ts"],"sourcesContent":["// Dữ liệu được fetched từ API thay vì dùng static data\nimport axiosInstance from '../services/axios.customize.service';\n\n// Khai báo các interface\nexport interface User {\n  _id: string;\n  userId: string;\n  username: string;\n  email: string;\n  password: string;\n  fullName: string;\n  phone: string;\n  role: 'PATIENT' | 'DOCTOR' | 'PHARMACIST' | 'RECEPTIONIST' | 'ADMIN';\n  createdAt: string;\n  updatedAt: string;\n  __v: number;\n}\n\nexport interface Queue {\n  _id: string;\n  patient: string; // ObjectId của bệnh nhân\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled';\n  doctorId?: string; // ObjectId của bác sĩ được chỉ định (nếu có)\n  createdAt: string;\n  updatedAt: string;\n  __v: number;\n}\n\nexport interface Prescription {\n  _id: string;\n  customPrescriptionId: string;\n  patientId: string; // ObjectId\n  doctorId: string; // ObjectId\n  diagnosis: string;\n  date: string;\n  status: 'PENDING_DISPENSE' | 'DISPENSED' | 'CANCELED';\n  __v: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface PrescriptionDetail {\n  _id: string;\n  customPrescriptionDetailId: string;\n  prescriptionId: string; // ObjectId\n  medicineId: string; // ObjectId\n  quantity: number;\n  dosage: string;\n  __v: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Medicine {\n  _id: string;\n  customMedicineId: string;\n  name: string;\n  totalPills: number;\n  price: number;\n  __v: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Invoice {\n  _id: string;\n  prescriptionId: string; // ObjectId\n  patientId: string; // ObjectId\n  totalAmount: number;\n  status: 'PAID' | 'UNPAID';\n  __v: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Biến cache để lưu trữ dữ liệu từ API\nexport let mockUsers: User[] = [];\nexport let mockQueues: Queue[] = [];\nexport let mockMedicines: Medicine[] = [];\nexport let mockPrescriptions: Prescription[] = [];\nexport let mockPrescriptionDetails: PrescriptionDetail[] = [];\nexport let mockInvoices: Invoice[] = [];\n\n// Biến toàn cục để lưu token xác thực\nlet authToken: string | null = null;\n\n// Hàm thiết lập token khi người dùng đăng nhập\nexport const setAuthToken = (token: string) => {\n  authToken = token;\n  if (typeof window !== 'undefined') { // Kiểm tra nếu đang chạy trên browser\n    localStorage.setItem('authToken', token); // Lưu token vào localStorage để giữ qua refresh\n  }\n};\n\n// Hàm để lấy token hiện tại\nexport const getAuthToken = () => {\n  // Nếu không có token trong memory, thử lấy từ localStorage\n  if (!authToken && typeof window !== 'undefined') {\n    authToken = localStorage.getItem('authToken');\n  }\n  return authToken;\n};\n\n// Helper function để thực hiện API call có xác thực\nconst authenticatedGet = async (endpoint: string) => {\n  try {\n    // Lấy token từ localStorage hoặc cookies\n    let token = getAuthToken();\n    \n    // Thử lấy token từ cookies nếu không tìm thấy trong localStorage\n    if (!token && typeof document !== 'undefined') {\n      // Check browser cookies if localStorage doesn't have the token\n      const cookies = document.cookie.split(';');\n      const tokenCookie = cookies.find(c => c.trim().startsWith('token='));\n      if (tokenCookie) {\n        token = tokenCookie.split('=')[1];\n        console.log(\"Found token in cookies, using it for API calls\");\n        // Lưu lại vào authToken để sử dụng cho các lần sau\n        setAuthToken(token);\n      }\n    }\n    \n    if (!token) {\n      console.warn('No authentication token available for API call to:', endpoint);\n      console.warn('Please login first or check token storage.');\n      return null;\n    }\n\n    console.log(`Making authenticated request to ${endpoint}`);\n    console.log(`Using token (first 10 chars): ${token.substring(0, 10)}...`);\n\n    const response = await axiosInstance.get(endpoint, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    \n    console.log(`Successful response from ${endpoint}:`, response.status);\n    if (Array.isArray(response.data)) {\n      console.log(`Got ${response.data.length} items from ${endpoint}`);\n    } else {\n      console.log(`Got data from ${endpoint}:`, response.data ? 'Object returned' : 'Empty response');\n    }\n    return response.data;\n  } catch (error: any) {\n    console.error(`Error fetching from ${endpoint}:`, error.message);\n    \n    // Log more detailed error info\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n      \n      if (error.response.status === 403) {\n        console.error(`Access forbidden to ${endpoint} - check user permissions`);\n      } else if (error.response.status === 401) {\n        console.error(`Unauthorized access to ${endpoint} - token may be expired`);\n        // Thử xóa token để người dùng phải đăng nhập lại\n        if (typeof window !== 'undefined') {\n          localStorage.removeItem('authToken');\n          document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n          authToken = null;\n        }\n      }\n    } else if (error.request) {\n      console.error('No response received from request. Server may be down.');\n    } else {\n      console.error('Error setting up request:', error.message);\n    }\n    \n    return null;\n  }\n};\n\n// ============= FETCH DATA FUNCTIONS =============\n\n// Load users từ API\nexport const fetchUsers = async () => {\n  console.log('Fetching users from API...');\n  \n  // Đầu tiên thử lấy thông tin user hiện tại để biết role\n  try {\n    const currentUser = await authenticatedGet('/users/me');\n    \n    if (currentUser) {\n      console.log(`Current user role: ${currentUser.role}`);\n      \n      if (currentUser.role === 'ADMIN') {\n        // Nếu là ADMIN, có quyền lấy tất cả users\n        console.log('User is ADMIN, trying to fetch all users');\n        const data = await authenticatedGet('/users');\n        \n        if (data && Array.isArray(data)) {\n          console.log(`Successfully fetched ${data.length} users from API`);\n          mockUsers = data;\n          return data;\n        }\n      } \n      \n      // Dù là role nào, thử dùng endpoint mới để lấy danh sách bệnh nhân\n      if (['ADMIN', 'DOCTOR', 'PHARMACIST', 'RECEPTIONIST'].includes(currentUser.role)) {\n        console.log(`Trying to fetch patients using /users/patients endpoint for ${currentUser.role}`);\n        const patients = await authenticatedGet('/users/patients');\n        \n        if (patients && Array.isArray(patients)) {\n          console.log(`Successfully fetched ${patients.length} patients from API`);\n          \n          // Kết hợp với dữ liệu hiện có (nếu có)\n          // Giữ lại các user không phải bệnh nhân từ danh sách hiện có (nếu có)\n          const nonPatients = mockUsers.filter(user => user.role !== 'PATIENT');\n          mockUsers = [...nonPatients, ...patients];\n          \n          console.log(`Combined user data: ${mockUsers.length} users (${nonPatients.length} non-patients + ${patients.length} patients)`);\n          return mockUsers;\n        }\n      }\n      \n      // Nếu không thể lấy dữ liệu, giữ nguyên dữ liệu mockUsers hiện tại\n      console.log(`Using existing mock data with ${mockUsers.length} users`);\n      return [...mockUsers];\n    } else {\n      console.error('Could not fetch current user info, authentication may be invalid');\n      return mockUsers;\n    }\n  } catch (error) {\n    console.error('Error in fetchUsers:', error);\n    return mockUsers;\n  }\n};\n\n// Load queues từ API\nexport const fetchQueues = async () => {\n  const data = await authenticatedGet('/queues');\n  if (data && Array.isArray(data)) {\n    mockQueues = data;\n    return data;\n  }\n  return [];\n};\n\n// Load medicines từ API\nexport const fetchMedicines = async () => {\n  const data = await authenticatedGet('/medicines');\n  if (data && Array.isArray(data)) {\n    mockMedicines = data;\n    return data;\n  }\n  return [];\n};\n\n// Load prescriptions từ API\nexport const fetchPrescriptions = async () => {\n  const data = await authenticatedGet('/prescriptions');\n  if (data && Array.isArray(data)) {\n    mockPrescriptions = data;\n    return data;\n  }\n  return [];\n};\n\n// Load prescription details từ API\nexport const fetchPrescriptionDetails = async () => {\n  const data = await authenticatedGet('/prescription-details');\n  if (data && Array.isArray(data)) {\n    mockPrescriptionDetails = data;\n    return data;\n  }\n  return [];\n};\n\n// Load invoices từ API\nexport const fetchInvoices = async () => {\n  const data = await authenticatedGet('/invoices');\n  if (data && Array.isArray(data)) {\n    mockInvoices = data;\n    return data;\n  }\n  return [];\n};\n\n// Initialize all data (call when app starts)\nexport const initializeData = async () => {\n  console.log('Initializing data from API or mock sources...');\n  \n  try {\n    // Check if we have a valid token first\n    const token = getAuthToken();\n    if (!token) {\n      console.warn('No authentication token found, will use existing mock data');\n      return false;\n    }\n    \n    // Try to validate token\n    try {\n      console.log('Validating token before fetching data...');\n      const currentUser = await authenticatedGet('/users/me');\n      if (!currentUser) {\n        console.error('Token validation failed, cannot fetch data');\n        return false;\n      }\n      console.log(`Token valid, logged in as ${currentUser.username} (${currentUser.role})`);\n    } catch (error) {\n      console.error('Error validating token:', error);\n      return false;\n    }\n    \n    // Initialize with separate try/catch for each resource type\n    // This allows some data to load even if others fail\n    const results = {\n      users: false,\n      queues: false,\n      medicines: false,\n      prescriptions: false,\n      prescriptionDetails: false,\n      invoices: false\n    };\n    \n    try {\n      await fetchUsers();\n      results.users = true;\n      console.log(`Users loaded: ${mockUsers.length} items`);\n    } catch (error) {\n      console.error('Error loading users:', error);\n    }\n    \n    try {\n      await fetchQueues();\n      results.queues = true;\n      console.log(`Queues loaded: ${mockQueues.length} items`);\n    } catch (error) {\n      console.error('Error loading queues:', error);\n    }\n    \n    try {\n      await fetchMedicines();\n      results.medicines = true;\n      console.log(`Medicines loaded: ${mockMedicines.length} items`);\n    } catch (error) {\n      console.error('Error loading medicines:', error);\n    }\n    \n    try {\n      await fetchPrescriptions();\n      results.prescriptions = true;\n      console.log(`Prescriptions loaded: ${mockPrescriptions.length} items`);\n    } catch (error) {\n      console.error('Error loading prescriptions:', error);\n    }\n    \n    try {\n      await fetchPrescriptionDetails();\n      results.prescriptionDetails = true;\n      console.log(`Prescription details loaded: ${mockPrescriptionDetails.length} items`);\n    } catch (error) {\n      console.error('Error loading prescription details:', error);\n    }\n    \n    try {\n      await fetchInvoices();\n      results.invoices = true;\n      console.log(`Invoices loaded: ${mockInvoices.length} items`);\n    } catch (error) {\n      console.error('Error loading invoices:', error);\n    }\n    \n    const successCount = Object.values(results).filter(Boolean).length;\n    console.log(`Data initialization complete: ${successCount}/6 resource types loaded successfully`);\n    \n    return successCount > 0;\n  } catch (error) {\n    console.error('Error in data initialization:', error);\n    return false;\n  }\n};\n\n// ============= USER-RELATED FUNCTIONS =============\n\nexport const getAllUsers = async () => {\n  if (mockUsers.length === 0) {\n    await fetchUsers();\n  }\n  return [...mockUsers];\n};\n\nexport const getUserById = async (id: string) => {\n  if (mockUsers.length === 0) {\n    await fetchUsers();\n  }\n  return mockUsers.find(user => user._id === id);\n};\n\nexport const getUsersByRole = async (role: string) => {\n  if (mockUsers.length === 0) {\n    await fetchUsers();\n  }\n  return mockUsers.filter(user => user.role === role);\n};\n\nexport const searchUsers = async (searchTerm: string) => {\n  if (mockUsers.length === 0) {\n    await fetchUsers();\n  }\n  const term = searchTerm.toLowerCase();\n  return mockUsers.filter(user => \n    user.fullName.toLowerCase().includes(term) || \n    user.username.toLowerCase().includes(term) ||\n    user.email.toLowerCase().includes(term) ||\n    user.phone.includes(term) ||\n    user.userId.includes(term)\n  );\n};\n\n// ============= QUEUE-RELATED FUNCTIONS =============\n\nexport const getAllQueues = async () => {\n  if (mockQueues.length === 0) {\n    await fetchQueues();\n  }\n  return [...mockQueues];\n};\n\nexport const getQueuesByStatus = async (status: string) => {\n  if (mockQueues.length === 0) {\n    await fetchQueues();\n  }\n  return mockQueues.filter(queue => queue.status === status);\n};\n\nexport const getQueueByPatientId = async (patientId: string) => {\n  if (mockQueues.length === 0) {\n    await fetchQueues();\n  }\n  return mockQueues.find(queue => queue.patient === patientId);\n};\n\nexport const addQueue = async (patientId: string, status: 'waiting' | 'in_progress' | 'completed' | 'canceled' = 'waiting') => {\n  // Kiểm tra xem patientId có tồn tại và là bệnh nhân không\n  const patient = await getUserById(patientId);\n  if (!patient || patient.role !== 'PATIENT') {\n    console.error('Invalid patient ID or user is not a patient');\n    return null;\n  }\n\n  // Kiểm tra xem bệnh nhân đã có trong queue chưa\n  const existingQueue = await getQueueByPatientId(patientId);\n  if (existingQueue) {\n    console.warn('Patient already in queue');\n    return existingQueue;\n  }\n\n  // Tạo queue mới\n  const newQueue: Queue = {\n    _id: generateMongoId(),\n    patient: patientId,\n    status: status,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    __v: 0\n  };\n\n  // Gọi API để tạo queue thực sự qua API\n  try {\n    // Đây là phần sẽ gọi API thực tế\n    // const response = await axiosInstance.post('/queues', newQueue, {\n    //   headers: { Authorization: `Bearer ${getAuthToken()}` }\n    // });\n    // if (response.data) {\n    //   mockQueues.push(response.data);\n    //   return response.data;\n    // }\n    \n    // Hiện tại, chúng ta chỉ thêm vào cache\n    mockQueues.push(newQueue);\n    return newQueue;\n  } catch (error) {\n    console.error('Error creating queue:', error);\n    return null;\n  }\n};\n\nexport const updateQueueStatus = async (\n  queueId: string, \n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled', \n  doctorId?: string\n) => {\n  if (mockQueues.length === 0) {\n    await fetchQueues();\n  }\n  \n  const index = mockQueues.findIndex(queue => queue._id === queueId);\n  if (index !== -1) {\n    const updatedQueue = {\n      ...mockQueues[index],\n      status: status,\n      updatedAt: new Date().toISOString()\n    };\n    \n    if (doctorId && status === 'in_progress') {\n      updatedQueue.doctorId = doctorId;\n    }\n    \n    // Thực tế sẽ gọi API để cập nhật queue\n    // const response = await axiosInstance.put(`/queues/${queueId}`, updatedQueue, {\n    //   headers: { Authorization: `Bearer ${getAuthToken()}` }\n    // });\n    \n    // Hiện tại chỉ cập nhật trong cache\n    mockQueues[index] = updatedQueue;\n    return mockQueues[index];\n  }\n  return null;\n};\n\nexport const deleteQueue = async (queueId: string) => {\n  if (mockQueues.length === 0) {\n    await fetchQueues();\n  }\n  \n  const index = mockQueues.findIndex(queue => queue._id === queueId);\n  if (index !== -1) {\n    const deletedQueue = mockQueues[index];\n    \n    // Thực tế sẽ gọi API để xóa queue\n    // await axiosInstance.delete(`/queues/${queueId}`, {\n    //   headers: { Authorization: `Bearer ${getAuthToken()}` }\n    // });\n    \n    // Hiện tại chỉ xóa trong cache\n    mockQueues.splice(index, 1);\n    return deletedQueue;\n  }\n  return null;\n};\n\n// ============= MEDICINE-RELATED FUNCTIONS =============\n\nexport const getAllMedicines = async () => {\n  if (mockMedicines.length === 0) {\n    await fetchMedicines();\n  }\n  return [...mockMedicines];\n};\n\nexport const getMedicineById = async (id: string) => {\n  if (mockMedicines.length === 0) {\n    await fetchMedicines();\n  }\n  return mockMedicines.find(medicine => medicine._id === id);\n};\n\nexport const searchMedicines = async (searchTerm: string) => {\n  if (mockMedicines.length === 0) {\n    await fetchMedicines();\n  }\n  const term = searchTerm.toLowerCase();\n  return mockMedicines.filter(medicine => \n    medicine.name.toLowerCase().includes(term) || \n    medicine.customMedicineId.toLowerCase().includes(term)\n  );\n};\n\n// ============= PRESCRIPTION-RELATED FUNCTIONS =============\n\nexport const getAllPrescriptions = async () => {\n  if (mockPrescriptions.length === 0) {\n    await fetchPrescriptions();\n  }\n  return [...mockPrescriptions];\n};\n\nexport const getPrescriptionById = async (id: string) => {\n  if (mockPrescriptions.length === 0) {\n    await fetchPrescriptions();\n  }\n  return mockPrescriptions.find(prescription => prescription._id === id);\n};\n\nexport const getPrescriptionsByPatientId = async (patientId: string) => {\n  if (mockPrescriptions.length === 0) {\n    await fetchPrescriptions();\n  }\n  return mockPrescriptions.filter(prescription => prescription.patientId === patientId);\n};\n\nexport const getPrescriptionsByDoctorId = async (doctorId: string) => {\n  if (mockPrescriptions.length === 0) {\n    await fetchPrescriptions();\n  }\n  return mockPrescriptions.filter(prescription => prescription.doctorId === doctorId);\n};\n\nexport const getPrescriptionsByStatus = async (status: string) => {\n  if (mockPrescriptions.length === 0) {\n    await fetchPrescriptions();\n  }\n  return mockPrescriptions.filter(prescription => prescription.status === status);\n};\n\n// ============= PRESCRIPTION DETAIL-RELATED FUNCTIONS =============\n\nexport const getAllPrescriptionDetails = async () => {\n  if (mockPrescriptionDetails.length === 0) {\n    await fetchPrescriptionDetails();\n  }\n  return [...mockPrescriptionDetails];\n};\n\nexport const getPrescriptionDetailsByPrescriptionId = async (prescriptionId: string) => {\n  if (mockPrescriptionDetails.length === 0) {\n    await fetchPrescriptionDetails();\n  }\n  return mockPrescriptionDetails.filter(detail => detail.prescriptionId === prescriptionId);\n};\n\nexport const getMedicinesForPrescription = async (prescriptionId: string) => {\n  const details = await getPrescriptionDetailsByPrescriptionId(prescriptionId);\n  \n  const result = [];\n  for (const detail of details) {\n    const medicine = await getMedicineById(detail.medicineId);\n    result.push({\n      ...detail,\n      medicine: medicine || null\n    });\n  }\n  \n  return result;\n};\n\n// ============= INVOICE-RELATED FUNCTIONS =============\n\nexport const getAllInvoices = async () => {\n  if (mockInvoices.length === 0) {\n    await fetchInvoices();\n  }\n  return [...mockInvoices];\n};\n\nexport const getInvoiceById = async (id: string) => {\n  if (mockInvoices.length === 0) {\n    await fetchInvoices();\n  }\n  return mockInvoices.find(invoice => invoice._id === id);\n};\n\nexport const getInvoiceByPrescriptionId = async (prescriptionId: string) => {\n  if (mockInvoices.length === 0) {\n    await fetchInvoices();\n  }\n  return mockInvoices.find(invoice => invoice.prescriptionId === prescriptionId);\n};\n\nexport const getInvoicesByPatientId = async (patientId: string) => {\n  if (mockInvoices.length === 0) {\n    await fetchInvoices();\n  }\n  return mockInvoices.filter(invoice => invoice.patientId === patientId);\n};\n\nexport const getInvoicesByStatus = async (status: string) => {\n  if (mockInvoices.length === 0) {\n    await fetchInvoices();\n  }\n  return mockInvoices.filter(invoice => invoice.status === status);\n};\n\n// ============= UTILITY FUNCTIONS =============\n\nexport const getPatientFullPrescriptionDetails = async (patientId: string) => {\n  const prescriptions = await getPrescriptionsByPatientId(patientId);\n  \n  const result = [];\n  for (const prescription of prescriptions) {\n    // Lấy thông tin bác sĩ\n    const doctor = await getUserById(prescription.doctorId);\n    \n    // Lấy chi tiết đơn thuốc và thông tin thuốc\n    const details = await getPrescriptionDetailsByPrescriptionId(prescription._id);\n    const medicineDetails = [];\n    \n    for (const detail of details) {\n      const medicine = await getMedicineById(detail.medicineId);\n      medicineDetails.push({\n        ...detail,\n        medicineName: medicine ? medicine.name : 'Unknown',\n        medicinePrice: medicine ? medicine.price : 0\n      });\n    }\n    \n    // Lấy hóa đơn nếu có\n    const invoice = await getInvoiceByPrescriptionId(prescription._id);\n    \n    result.push({\n      ...prescription,\n      doctorName: doctor ? doctor.fullName : 'Unknown',\n      details: medicineDetails,\n      invoice: invoice || null\n    });\n  }\n  \n  return result;\n};\n\nexport const getAllPatients = async () => {\n  if (mockUsers.length === 0) {\n    await fetchUsers();\n  }\n  return mockUsers.filter(user => user.role === 'PATIENT');\n};\n\nexport const getAllDoctors = async () => {\n  if (mockUsers.length === 0) {\n    await fetchUsers();\n  }\n  return mockUsers.filter(user => user.role === 'DOCTOR');\n};\n\nexport type Patient = User;\nexport const mockPatients = getAllPatients;\n\nexport const getWaitingPatients = async () => {\n  const waitingQueues = await getQueuesByStatus('waiting');\n  \n  const result = [];\n  for (const queue of waitingQueues) {\n    const patient = await getUserById(queue.patient);\n    result.push({\n      queueInfo: queue,\n      patientInfo: patient || null\n    });\n  }\n  \n  return result;\n};\n\nexport const getAllQueuesWithPatientInfo = async () => {\n  if (mockQueues.length === 0) {\n    await fetchQueues();\n  }\n  \n  const result = [];\n  for (const queue of mockQueues) {\n    const patient = await getUserById(queue.patient);\n    result.push({\n      ...queue,\n      patientInfo: patient || null\n    });\n  }\n  \n  return result;\n};\n\n// Hàm tạo MongoDB-like ID\nexport const generateMongoId = () => {\n  // MongoDB ObjectId format: 24 hex characters\n  const timestamp = Math.floor(Date.now() / 1000).toString(16).padStart(8, '0');\n  const randomPart = Array(16).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('');\n  return timestamp + randomPart;\n};\n\n// Hàm để làm mới/reload dữ liệu từ API\nexport const reloadData = async (dataTypes?: ('users' | 'queues' | 'medicines' | 'prescriptions' | 'prescriptionDetails' | 'invoices')[]) => {\n  if (!dataTypes || dataTypes.length === 0) {\n    // Reload tất cả\n    return await initializeData();\n  }\n\n  const promises = [];\n  if (dataTypes.includes('users')) promises.push(fetchUsers());\n  if (dataTypes.includes('queues')) promises.push(fetchQueues());\n  if (dataTypes.includes('medicines')) promises.push(fetchMedicines());\n  if (dataTypes.includes('prescriptions')) promises.push(fetchPrescriptions());\n  if (dataTypes.includes('prescriptionDetails')) promises.push(fetchPrescriptionDetails());\n  if (dataTypes.includes('invoices')) promises.push(fetchInvoices());\n  \n  await Promise.all(promises);\n  return {\n    users: mockUsers.length,\n    queues: mockQueues.length,\n    medicines: mockMedicines.length,\n    prescriptions: mockPrescriptions.length,\n    prescriptionDetails: mockPrescriptionDetails.length,\n    invoices: mockInvoices.length\n  };\n};\n\n// Hàm thay thế để lấy dữ liệu khi không có quyền admin\nexport const fetchUsersAlternative = async () => {\n  console.log('Trying alternative method to fetch users...');\n  \n  try {\n    // Thử lấy thông tin người dùng hiện tại (me endpoint)\n    const currentUser = await authenticatedGet('/users/me');\n    if (!currentUser) {\n      console.warn('Could not fetch current user');\n      return [];\n    }\n    \n    console.log('Current user retrieved:', currentUser.role);\n    \n    if (currentUser.role === 'ADMIN') {\n      // Nếu là admin, thử lại với endpoint /users\n      return await fetchUsers();\n    }\n    \n    // Không phải admin, phải dùng cách khác\n    // 1. Nếu là bác sĩ, có thể lấy danh sách bệnh nhân được chỉ định\n    // 2. Nếu là receptionist, thử lấy dữ liệu theo cách khác\n    \n    // Endpoint hoặc API call thích hợp theo role\n    // Ví dụ: const patients = await authenticatedGet('/appointments/patients');\n    \n    // Tạm thời giữ nguyên dữ liệu hiện tại nếu có\n    return mockUsers.length > 0 ? mockUsers : [];\n  } catch (error) {\n    console.error('Alternative user fetch failed:', error);\n    return [];\n  }\n};\n\n// Mock function để gửi thông tin queue đến bác sĩ\nexport const sendQueueToDoctor = async (queueId: string): Promise<Queue | null> => {\n  try {\n    // Lấy thông tin queue\n    const queue = mockQueues.find(q => q._id === queueId);\n    \n    if (!queue) {\n      console.error(`Queue with ID ${queueId} not found.`);\n      return null;\n    }\n    \n    // Kiểm tra xem queue đã được gán cho bác sĩ chưa\n    if (!queue.doctorId) {\n      console.error(`Queue ${queueId} has no assigned doctor.`);\n      return null;\n    }\n    \n    // Trong môi trường thực tế, tại đây sẽ có logic gửi thông báo đến bác sĩ\n    // Trong mock data, ta chỉ cần đảm bảo trạng thái là in_progress\n    if (queue.status !== 'in_progress') {\n      queue.status = 'in_progress';\n      queue.updatedAt = new Date().toISOString();\n    }\n    \n    console.log(`Mock: Queue ${queueId} information sent to doctor ${queue.doctorId}`);\n    return queue;\n  } catch (error) {\n    console.error('Error sending queue information to doctor:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2263, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/dashboard-doctor/Dashboard.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { PatientList } from './PatientList';\nimport { DiagnosisPanel } from './DiagnosisPanel';\nimport { getAllQueuesWithPatientInfo, updateQueueStatus, User, Queue } from '../datats/mockPatients';\nimport * as apiService from '../services/api.service';\nimport { useAuth } from '../context/AuthContext';\n\n// === SỬA LỖI 1: Cập nhật Interface cho chính xác ===\n// Interface cho thông tin bệnh nhân trong danh sách chờ\ninterface PatientInQueue {\n  _id: string; // ID của queue\n  patient: string; // ID của bệnh nhân\n  status: 'waiting' | 'in_progress' | 'completed' | 'canceled';\n  doctorId?: string;\n  createdAt: string;\n  updatedAt: string;\n  patientInfo: User | null; // Cho phép patientInfo là null để phản ánh đúng dữ liệu\n  __v?: number; // Thêm thuộc tính tùy chọn này\n}\n\nexport const Dashboard = () => {\n  const { token } = useAuth();\n  const [patients, setPatients] = useState<PatientInQueue[]>([]);\n  const [selectedPatient, setSelectedPatient] = useState<PatientInQueue | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadPatients();\n    const interval = setInterval(() => {\n      loadPatients();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, [token]);\n\n  // Hàm để tải danh sách bệnh nhân đang chờ\n  const loadPatients = async () => {\n    try {\n      setLoading(true);\n      console.log(\"Refreshing doctor's patient list...\");\n      \n      let patientsData: PatientInQueue[] = [];\n\n      if (token) {\n        try {\n          const doctorQueues = await apiService.getQueuesByDoctor(token, 'in_progress');\n          console.log(`Loaded ${doctorQueues.length} queues assigned to current doctor`);\n          \n          // Chuyển đổi an toàn, chấp nhận patient có thể không được populate\n          patientsData = doctorQueues\n            .filter((queue: any) => queue) // Lọc bỏ queue null\n            .map((queue: any): PatientInQueue => ({\n              _id: queue._id,\n              patient: typeof queue.patient === 'object' && queue.patient !== null ? queue.patient._id : queue.patient,\n              status: queue.status,\n              doctorId: typeof queue.doctorId === 'object' && queue.doctorId !== null ? queue.doctorId._id : queue.doctorId,\n              createdAt: queue.createdAt,\n              updatedAt: queue.updatedAt,\n              patientInfo: typeof queue.patient === 'object' && queue.patient !== null ? queue.patient : null,\n              __v: queue.__v\n            }));\n          \n        } catch (apiError) {\n          console.error(\"API error loading doctor's patients:\", apiError);\n          patientsData = await fallbackToMockData();\n        }\n      } else {\n        patientsData = await fallbackToMockData();\n      }\n\n      // === SỬA LỖI 2: Lọc bỏ các bản ghi không có thông tin bệnh nhân ===\n      // Chỉ giữ lại những hàng chờ có thông tin bệnh nhân hợp lệ để hiển thị\n      const validPatients = patientsData.filter(p => p.patientInfo !== null);\n      setPatients(validPatients);\n\n    } catch (error) {\n      console.error(\"Error loading patients:\", error);\n      setPatients([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Hàm fallback trả về đúng kiểu dữ liệu\n  const fallbackToMockData = async (): Promise<PatientInQueue[]> => {\n    try {\n      console.log(\"Using mock data for doctor's patients\");\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n      const doctorId = currentUser?._id;\n      \n      if (!doctorId) return [];\n      \n      const queues = await getAllQueuesWithPatientInfo();\n      \n      // Lọc an toàn\n      const patientsInProgress = queues.filter(q => \n        q && q.status === 'in_progress' && q.doctorId === doctorId\n      );\n      \n      return patientsInProgress as PatientInQueue[];\n    } catch (error) {\n      console.error(\"Error loading mock patient data:\", error);\n      return [];\n    }\n  };\n\n  const handleSelectPatient = (patient: PatientInQueue) => {\n    setSelectedPatient(patient);\n  };\n\n  const handleMarkAsDone = async (queueId: string) => {\n    setLoading(true);\n    try {\n      if (token) {\n        await apiService.updateQueueStatus(queueId, token, 'completed');\n      } else {\n        await updateQueueStatus(queueId, 'completed');\n      }\n      \n      await loadPatients();\n      setSelectedPatient(null);\n    } catch (error) {\n      console.error(\"Error marking patient as done:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sortedPatients = [...patients]\n    .filter(p => p && p.createdAt)\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n  return (\n    <div className=\"flex flex-col lg:flex-row w-full h-full gap-6\">\n      <div className=\"w-full lg:w-1/3 h-full\">\n        <PatientList \n          patients={sortedPatients} \n          onSelectPatient={handleSelectPatient} \n          selectedPatientId={selectedPatient ? selectedPatient._id : undefined} \n        />\n      </div>\n      <div className=\"w-full lg:w-2/3 h-full\">\n        <DiagnosisPanel \n          patient={selectedPatient?.patientInfo || null} \n          queueInfo={selectedPatient || null}\n          onMarkAsDone={handleMarkAsDone} \n        />\n      </div>\n    </div>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2440, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/dashboard-doctor/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useRouter } from 'next/navigation';\nimport { Header } from './Header';\nimport { Dashboard } from './Dashboard';\n\nexport default function DashboardDoctor() {\n  const { user, isAuthenticated } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      router.push('/login');\n    }\n  }, [isAuthenticated, router]);\n\n  if (!isAuthenticated || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col w-full min-h-screen bg-gray-50\">\n      <Header />\n      <main className=\"flex-1 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <Dashboard />\n      </main>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;;;AANA;;;;;;AAQe,SAAS;;IACtB,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,GAAG,CAAA,GAAA,wIAAA,CAAA,UAAO,AAAD;IACxC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACR,IAAI,CAAC,iBAAiB;gBACpB,OAAO,IAAI,CAAC;YACd;QACF;oCAAG;QAAC;QAAiB;KAAO;IAE5B,IAAI,CAAC,mBAAmB,CAAC,MAAM;QAC7B,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;;;;;;;;;;IAGrB;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,+IAAA,CAAA,SAAM;;;;;0BACP,6LAAC;gBAAK,WAAU;0BACd,cAAA,6LAAC,kJAAA,CAAA,YAAS;;;;;;;;;;;;;;;;AAIlB;GA1BwB;;QACY,wIAAA,CAAA,UAAO;QAC1B,qIAAA,CAAA,YAAS;;;KAFF","debugId":null}}]
}