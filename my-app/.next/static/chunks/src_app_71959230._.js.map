{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/services/axios.customize.service.ts"],"sourcesContent":["import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:5000/api', // Đổi lại nếu BE chạy port khác hoặc deploy\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // Nếu BE dùng cookie/session\n  timeout: 10000, // 10 second timeout\n});\n\n// Add request interceptor for logging\naxiosInstance.interceptors.request.use(\n  (config) => {\n    console.log(`[API Request] ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('[API Request Error]', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for logging\naxiosInstance.interceptors.response.use(\n  (response) => {\n    console.log(`[API Response] ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    if (error.response) {\n      console.error(`[API Error] ${error.response.status} ${error.config?.url}:`, error.response.data);\n    } else if (error.request) {\n      console.error('[API Error] No response received:', error.request);\n    } else {\n      console.error('[API Error] Request setup error:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACjC,SAAS;IACT,SAAS;QACP,gBAAgB;IAClB;IACA,iBAAiB;IACjB,SAAS;AACX;AAEA,sCAAsC;AACtC,cAAc,YAAY,CAAC,OAAO,CAAC,GAAG,CACpC,CAAC;QAC8B;IAA7B,QAAQ,GAAG,CAAC,AAAC,iBAAgD,QAAhC,iBAAA,OAAO,MAAM,cAAb,qCAAA,eAAe,WAAW,IAAG,KAAc,OAAX,OAAO,GAAG;IACvE,OAAO;AACT,GACA,CAAC;IACC,QAAQ,KAAK,CAAC,uBAAuB;IACrC,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGF,uCAAuC;AACvC,cAAc,YAAY,CAAC,QAAQ,CAAC,GAAG,CACrC,CAAC;IACC,QAAQ,GAAG,CAAC,AAAC,kBAAoC,OAAnB,SAAS,MAAM,EAAC,KAAuB,OAApB,SAAS,MAAM,CAAC,GAAG;IACpE,OAAO;AACT,GACA,CAAC;IACC,IAAI,MAAM,QAAQ,EAAE;YACoC;QAAtD,QAAQ,KAAK,CAAC,AA/BpB,AA+BqB,sBAAc,MAAM,QAAQ,CAAC,MAAM,EAAC,KAAqB,QAAlB,gBAAA,MAAM,MAAM,cAAZ,oCAAA,cAAc,GAAG,EAAC,MAAI,MAAM,QAAQ,CAAC,IAAI;IACjG,OAAO,IAAI,MAAM,OAAO,EAAE;QACxB,QAAQ,KAAK,CAAC,qCAAqC,MAAM,OAAO;IAClE,OAAO;QACL,QAAQ,KAAK,CAAC,oCAAoC,MAAM,OAAO;IACjE;IACA,OAAO,QAAQ,MAAM,CAAC;AACxB;uCAGa","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/services/api.service.ts"],"sourcesContent":["import axiosInstance from './axios.customize.service';\n\n// Đăng nhập\nexport const login = async (email: string, password: string) => {\n  const response = await axiosInstance.post('/users/login', { email, password });\n  return response.data;\n};\n\n// Lấy danh sách thuốc (cần token)\nexport const getMedicines = async (token: string) => {\n  const response = await axiosInstance.get('/medicines', {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\n// Get a specific medicine by ID\nexport const getMedicineById = async (medicineId: string, token: string) => {\n  console.log(`API Call: getMedicineById for id: ${medicineId}`);\n  try {\n    const response = await axiosInstance.get(`/medicines/${medicineId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log(`API Response: Found medicine with name: ${response.data.name}`);\n    return response.data;\n  } catch (error: any) {\n    console.error(`API Error: getMedicineById failed for id ${medicineId}:`, error.response?.data || error.message);\n    console.error('Error response status:', error.response?.status);\n    throw error;\n  }\n};\n\n// Create a new medicine\nexport const createMedicine = async (medicineData: any, token: string) => {\n  const response = await axiosInstance.post('/medicines', medicineData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\n// Update an existing medicine\nexport const updateMedicine = async (medicineId: string, medicineData: any, token: string) => {\n  const response = await axiosInstance.put(`/medicines/${medicineId}`, medicineData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\n// Delete a medicine\nexport const deleteMedicine = async (medicineId: string, token: string) => {\n  const response = await axiosInstance.delete(`/medicines/${medicineId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\n// Appointments API methods\nexport const getAppointments = async (token: string) => {\n  const response = await axiosInstance.get('/appointments', {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const createAppointment = async (appointmentData: any, token: string) => {\n  const response = await axiosInstance.post('/appointments', appointmentData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const updateAppointment = async (appointmentId: string, appointmentData: any, token: string) => {\n  const response = await axiosInstance.put(`/appointments/${appointmentId}`, appointmentData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const deleteAppointment = async (appointmentId: string, token: string) => {\n  const response = await axiosInstance.delete(`/appointments/${appointmentId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\n// Patient/User API methods\nexport const createUser = async (userData: any, token: string) => {\n  const response = await axiosInstance.post('/users', userData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const updateUser = async (userId: string, userData: any, token: string) => {\n  const response = await axiosInstance.put(`/users/${userId}`, userData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const getUsers = async (token: string) => {\n  const response = await axiosInstance.get('/users', {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const getUserById = async (userId: string, token: string) => {\n  const response = await axiosInstance.get(`/users/${userId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\n// Lấy danh sách bệnh nhân từ API\nexport const getPatients = async (token: string) => {\n  try {\n    // Kiểm tra token trước khi gửi request\n    if (!token) {\n      console.error('No authentication token provided for getPatients request');\n      throw new Error('Authentication token is required');\n    }\n\n    // Log token để debug (chỉ hiện 10 ký tự đầu để đảm bảo an toàn)\n    console.log('Using token (first 10 chars):', token.substring(0, 10) + '...');\n\n    let patients = [];\n    \n    // Trước tiên, thử lấy role của người dùng hiện tại\n    const meResponse = await axiosInstance.get('/users/me', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    \n    const currentUser = meResponse.data;\n    console.log('Current user role:', currentUser.role);\n    \n    // Thử sử dụng endpoint mới dành cho tất cả nhân viên y tế\n    if (['ADMIN', 'DOCTOR', 'RECEPTIONIST', 'PHARMACIST'].includes(currentUser.role)) {\n      console.log(`${currentUser.role} user detected, using dedicated patient endpoint`);\n      try {\n        // Sử dụng endpoint /users/patients mới đã tạo\n        const response = await axiosInstance.get('/users/patients', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        \n        patients = response.data;\n        console.log(`Successfully fetched ${patients.length} patients using /users/patients endpoint`);\n        return patients;\n      } catch (error: any) {\n        console.error(`Error fetching patients for ${currentUser.role}:`, error);\n        \n        // Nếu endpoint mới chưa được triển khai, thử dùng cách thức cũ\n        if (error.response && error.response.status === 404) {\n          console.warn('The /users/patients endpoint may not exist yet, falling back to other methods');\n        } else {\n          throw error; // Re-throw for other types of errors\n        }\n      }\n    }\n    \n    // Nếu là ADMIN và endpoint /users/patients không hoạt động, thử dùng /users\n    if (currentUser.role === 'ADMIN') {\n      console.log('Admin user detected, falling back to /users endpoint');\n      try {\n        const response = await axiosInstance.get('/users', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        \n        patients = response.data.filter((user: any) => user.role === 'PATIENT');\n        console.log(`Successfully fetched ${patients.length} patients by filtering all users`);\n        return patients;\n      } catch (error: any) {\n        console.error('Error fetching all users as ADMIN:', error);\n        throw error;\n      }\n    } else {\n      // Nếu không có quyền và không có endpoint phù hợp\n      console.warn(`User role ${currentUser.role} may not have sufficient permissions`);\n      throw new Error(`Insufficient permissions: ${currentUser.role} cannot fetch patients`);\n    }\n  } catch (error: any) {\n    console.error('Error fetching patients from API:', error.message);\n    \n    // Log thêm chi tiết về lỗi để debug\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n    }\n    \n    throw error;\n  }\n};\n\n// Kiểm tra tính hợp lệ của token\nexport const validateToken = async (token: string) => {\n  console.log('Validating token (first 10 chars):', token.substring(0, 10) + '...');\n  try {\n    // Gọi một endpoint đơn giản để kiểm tra token có hợp lệ không\n    const response = await axiosInstance.get('/users/validate-token', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log('Token validation successful, user data:', response.data);\n    \n    // Get detailed user info to check role\n    try {\n      const meResponse = await axiosInstance.get('/users/me', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      console.log('Current user role from /users/me:', meResponse.data?.role);\n      return { valid: true, data: meResponse.data || response.data };\n    } catch (meError) {\n      console.error('Failed to get additional user info:', meError);\n      return { valid: true, data: response.data };\n    }\n  } catch (error: any) {\n    console.error('Token validation error:', error);\n    console.error('Error response status:', error.response?.status);\n    console.error('Error response data:', error.response?.data);\n    \n    if (error.response && error.response.status === 401) {\n      // Token không hợp lệ hoặc đã hết hạn\n      return { valid: false, reason: 'expired' };\n    } else if (error.response && error.response.status === 403) {\n      // Token hợp lệ nhưng không có quyền\n      return { valid: true, reason: 'insufficient_permissions' };\n    }\n    \n    return { valid: false, reason: 'unknown', error };\n  }\n};\n\n// Queue API methods\nexport const getQueues = async (token: string) => {\n  const response = await axiosInstance.get('/queues', {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const getQueuesByDoctor = async (token: string, status?: string) => {\n  const url = status ? `/queues/doctor?status=${status}` : '/queues/doctor';\n  const response = await axiosInstance.get(url, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const getQueuesWithPatients = async (token: string) => {\n  const response = await axiosInstance.get('/queues/with-patients', {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const getQueuesByStatus = async (status: string, token: string) => {\n  const response = await axiosInstance.get(`/queues/status/${status}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const createQueue = async (patientId: string, token: string, notes?: string) => {\n  const response = await axiosInstance.post('/queues', \n    { \n      patientId,\n      status: 'waiting',\n      notes\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  );\n  return response.data;\n};\n\nexport const updateQueueStatus = async (queueId: string, token: string, status: string, doctorId?: string, notes?: string) => {\n  const response = await axiosInstance.put(`/queues/${queueId}`, \n    { \n      status,\n      doctorId,\n      notes\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  );\n  return response.data;\n};\n\nexport const deleteQueue = async (queueId: string, token: string) => {\n  const response = await axiosInstance.delete(`/queues/${queueId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\n// Gửi thông tin bệnh nhân đến bác sĩ đã chỉ định\nexport const sendQueueToDoctor = async (queueId: string, token: string) => {\n  try {\n    const response = await axiosInstance.put(`/queues/${queueId}/send-to-doctor`, \n      {}, // Không cần gửi dữ liệu vì server sẽ lấy thông tin từ queueId\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error sending queue to doctor:\", error);\n    \n    // Log thêm chi tiết về lỗi để debug\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n    }\n    \n    throw error;\n  }\n};\n\n// Lấy danh sách bác sĩ từ API\nexport const getDoctors = async (token: string) => {\n  try {\n    // Kiểm tra token trước khi gửi request\n    if (!token) {\n      console.error('No authentication token provided for getDoctors request');\n      throw new Error('Authentication token is required');\n    }\n\n    // Log token để debug (chỉ hiện 10 ký tự đầu để đảm bảo an toàn)\n    console.log('Using token (first 10 chars):', token.substring(0, 10) + '...');\n\n    // Gọi API endpoint chuyên biệt cho bác sĩ\n    console.log('Fetching doctors using /users/doctors endpoint');\n    const response = await axiosInstance.get('/users/doctors', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    \n    console.log(`Successfully fetched ${response.data.length} doctors using dedicated endpoint`);\n    return response.data;\n  } catch (error: any) {\n    console.error('Error fetching doctors from API:', error.message);\n    \n    // Log thêm chi tiết về lỗi để debug\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n    }\n    \n    // Nếu endpoint chuyên biệt không tồn tại, thử dùng cách thức khác\n    if (error.response && error.response.status === 404) {\n      console.warn('The /users/doctors endpoint may not exist yet, falling back to filtering all users');\n      try {\n        // Thử lấy tất cả người dùng rồi lọc\n        const allUsers = await axiosInstance.get('/users', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        \n        const doctors = allUsers.data.filter((user: any) => user.role === 'DOCTOR');\n        console.log(`Successfully fetched ${doctors.length} doctors by filtering all users`);\n        return doctors;\n      } catch (fallbackError: any) {\n        console.error('Failed to fetch doctors using fallback method:', fallbackError);\n        throw fallbackError;\n      }\n    }\n    \n    throw error;\n  }\n};\n\n// Prescription API methods\nexport const createPrescription = async (prescriptionData: any, token: string) => {\n  console.log('API Call: createPrescription with data:', JSON.stringify(prescriptionData, null, 2));\n  try {\n    const response = await axiosInstance.post('/prescriptions', prescriptionData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log('API Response: createPrescription success:', response.data);\n    return response.data;\n  } catch (error: any) {\n    console.error('API Error: createPrescription failed:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const getPrescriptions = async (queryParams: { patientId?: string, doctorId?: string, status?: string } = {}, token: string) => {\n  console.log('API Call: getPrescriptions with params:', queryParams);\n  console.log('Using token (first 10 chars):', token.substring(0, 10) + '...');\n  try {\n    const response = await axiosInstance.get('/prescriptions', {\n      params: queryParams,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log(`API Response: Found ${response.data.length} prescriptions`);\n    return response.data;\n  } catch (error: any) {\n    console.error('API Error: getPrescriptions failed:', error.response?.data || error.message);\n    console.error('Error response status:', error.response?.status);\n    console.error('Error response headers:', error.response?.headers);\n    throw error;\n  }\n};\n\n// Helper function specifically for pharmacy to get pending prescriptions\nexport const getPendingDispensePrescriptions = async (token: string) => {\n  return getPrescriptions({ status: 'PENDING_DISPENSE' }, token);\n};\n\nexport const getPrescriptionById = async (prescriptionId: string, token: string) => {\n  const response = await axiosInstance.get(`/prescriptions/${prescriptionId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\nexport const updatePrescriptionStatus = async (prescriptionId: string, status: string, token: string) => {\n  const response = await axiosInstance.put(`/prescriptions/${prescriptionId}`, { status }, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\n// Prescription Detail API methods\nexport const createPrescriptionDetail = async (prescriptionDetailData: any, token: string) => {\n  const response = await axiosInstance.post('/prescriptiondetails', prescriptionDetailData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.data;\n};\n\n// Create multiple prescription details in batch\nexport const createBatchPrescriptionDetails = async (prescriptionId: string, details: any[], token: string) => {\n  console.log('API Call: createBatchPrescriptionDetails with data:', {\n    prescriptionId,\n    details: JSON.stringify(details, null, 2)\n  });\n  try {\n    const response = await axiosInstance.post('/prescriptiondetails/batch', {\n      prescriptionId,\n      details\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log('API Response: createBatchPrescriptionDetails success:', response.data);\n    return response.data;\n  } catch (error: any) {\n    console.error('API Error: createBatchPrescriptionDetails failed:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const getPrescriptionDetails = async (prescriptionId: string, token: string) => {\n  console.log(`API Call: getPrescriptionDetails for prescriptionId: ${prescriptionId}`);\n  console.log('Using token (first 10 chars):', token.substring(0, 10) + '...');\n  try {\n    const response = await axiosInstance.get('/prescriptiondetails', {\n      params: { prescriptionId },\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log(`API Response: Found ${response.data.length} prescription details`);\n    if (response.data.length > 0) {\n      console.log('First prescription detail sample:', {\n        id: response.data[0]._id,\n        prescriptionId: response.data[0].prescriptionId,\n        medicineId: response.data[0].medicineId,\n        quantity: response.data[0].quantity,\n        dosage: response.data[0].dosage\n      });\n    }\n    return response.data;\n  } catch (error: any) {\n    console.error('API Error: getPrescriptionDetails failed:', error.response?.data || error.message);\n    console.error('Error response status:', error.response?.status);\n    console.error('Error response headers:', error.response?.headers);\n    throw error;\n  }\n};\n\n// Deduct medicine quantity from inventory\nexport const deductMedicineStock = async (medicineId: string, quantity: number, token: string) => {\n  console.log(`API Call: Deducting ${quantity} units from medicine ID: ${medicineId}`);\n  try {\n    // Đầu tiên lấy thông tin hiện tại của thuốc\n    const medicine = await getMedicineById(medicineId, token);\n    \n    if (!medicine) {\n      throw new Error(`Medicine with ID ${medicineId} not found`);\n    }\n    \n    // Kiểm tra số lượng hợp lệ\n    if (medicine.totalPills < quantity) {\n      console.warn(`Warning: Attempting to deduct ${quantity} pills but only ${medicine.totalPills} available`);\n      // Trong trường hợp thực tế, bạn có thể muốn ném lỗi ở đây\n    }\n    \n    // Tính toán số lượng mới\n    const newQuantity = Math.max(0, medicine.totalPills - quantity);\n    \n    // Cập nhật số lượng thuốc\n    const response = await axiosInstance.put(`/medicines/${medicineId}`, \n      { totalPills: newQuantity }, \n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    \n    console.log(`API Success: Updated medicine ${medicine.name}, new quantity: ${newQuantity}`);\n    return response.data;\n  } catch (error: any) {\n    console.error('API Error: deductMedicineStock failed:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\n// Tính doanh thu từ đơn thuốc đã phát\nexport const calculateRevenue = async (token: string, startDate?: string, endDate?: string) => {\n  console.log(`API Call: calculateRevenue from ${startDate || 'all time'} to ${endDate || 'now'}`);\n  try {\n    const params: any = { status: 'DISPENSED' };\n    \n    if (startDate) params.startDate = startDate;\n    if (endDate) params.endDate = endDate;\n    \n    const response = await axiosInstance.get('/prescriptions/revenue', {\n      params,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    \n    console.log(`API Response: Revenue calculation successful`);\n    return response.data;\n  } catch (error: any) {\n    console.error(`API Error: calculateRevenue failed:`, error.response?.data || error.message);\n    console.error('Error response status:', error.response?.status);\n    throw error;\n  }\n};\n\n// Tính doanh thu theo năm\nexport const calculateYearlyRevenue = async (token: string, year: string) => {\n  console.log(`API Call: calculateYearlyRevenue for year: ${year}`);\n  try {\n    const startDate = `${year}-01-01`;\n    const endDate = `${year}-12-31`;\n    \n    const response = await calculateRevenue(token, startDate, endDate);\n    return response;\n  } catch (error: any) {\n    console.error(`API Error: calculateYearlyRevenue failed for year ${year}:`, error);\n    throw error;\n  }\n};\n\n// Tính doanh thu chi tiết từ một đơn thuốc cụ thể\nexport const calculatePrescriptionRevenue = async (prescriptionId: string, token: string) => {\n  console.log(`API Call: calculatePrescriptionRevenue for id: ${prescriptionId}`);\n  try {\n    const response = await axiosInstance.get(`/prescriptions/${prescriptionId}/revenue`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    \n    console.log(`API Response: Prescription revenue calculation successful`);\n    return response.data;\n  } catch (error: any) {\n    console.error(`API Error: calculatePrescriptionRevenue failed for id ${prescriptionId}:`, error.response?.data || error.message);\n    console.error('Error response status:', error.response?.status);\n    throw error;\n  }\n};\n\nexport const deleteUser = async (id: string, authToken: string) => {\n  console.log(`[API Service] Sending request to delete user with ID: ${id}`);\n  try {\n    // Sử dụng axiosInstance đã được cấu hình để gửi yêu cầu DELETE\n    const response = await axiosInstance.delete(`/users/${id}`, {\n      headers: {\n        // Gửi token trong header Authorization để backend xác thực quyền\n        Authorization: `Bearer ${authToken}`,\n      },\n    });\n    \n    // Trả về dữ liệu từ server (ví dụ: { message: \"User deleted successfully\" })\n    return response.data;\n  } catch (error) {\n    // Log lỗi để debug và ném lỗi ra ngoài để component có thể bắt và xử lý\n    console.error(`[API Service] An error occurred while deleting user ${id}:`, error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGO,MAAM,QAAQ,OAAO,OAAe;IACzC,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,IAAI,CAAC,gBAAgB;QAAE;QAAO;IAAS;IAC5E,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,eAAe,OAAO;IACjC,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,cAAc;QACrD,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,kBAAkB,OAAO,YAAoB;IACxD,QAAQ,GAAG,CAAC,AAAC,qCAA+C,OAAX;IACjD,IAAI;QACF,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,cAAwB,OAAX,aAAc;YACnE,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QACA,QAAQ,GAAG,CAAC,AAAC,2CAA6D,OAAnB,SAAS,IAAI,CAAC,IAAI;QACzE,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAY;YACsD,iBACjC;QADxC,QAAQ,KAAK,CAAC,AAAC,4CAAsD,OAAX,YAAW,MAAI,EAAA,kBAAA,MAAM,QAAQ,cAAd,sCAAA,gBAAgB,IAAI,KAAI,MAAM,OAAO;QAC9G,QAAQ,KAAK,CAAC,2BAA0B,mBAAA,MAAM,QAAQ,cAAd,uCAAA,iBAAgB,MAAM;QAC9D,MAAM;IACR;AACF;AAGO,MAAM,iBAAiB,OAAO,cAAmB;IACtD,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,IAAI,CAAC,cAAc,cAAc;QACpE,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,iBAAiB,OAAO,YAAoB,cAAmB;IAC1E,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,cAAwB,OAAX,aAAc,cAAc;QACjF,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,iBAAiB,OAAO,YAAoB;IACvD,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,MAAM,CAAC,AAAC,cAAwB,OAAX,aAAc;QACtE,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,kBAAkB,OAAO;IACpC,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,iBAAiB;QACxD,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,oBAAoB,OAAO,iBAAsB;IAC5D,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,IAAI,CAAC,iBAAiB,iBAAiB;QAC1E,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,oBAAoB,OAAO,eAAuB,iBAAsB;IACnF,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,iBAA8B,OAAd,gBAAiB,iBAAiB;QAC1F,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,oBAAoB,OAAO,eAAuB;IAC7D,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,MAAM,CAAC,AAAC,iBAA8B,OAAd,gBAAiB;QAC5E,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,aAAa,OAAO,UAAe;IAC9C,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,IAAI,CAAC,UAAU,UAAU;QAC5D,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,aAAa,OAAO,QAAgB,UAAe;IAC9D,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,UAAgB,OAAP,SAAU,UAAU;QACrE,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,WAAW,OAAO;IAC7B,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,UAAU;QACjD,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,cAAc,OAAO,QAAgB;IAChD,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,UAAgB,OAAP,SAAU;QAC3D,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,cAAc,OAAO;IAChC,IAAI;QACF,uCAAuC;QACvC,IAAI,CAAC,OAAO;YACV,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,gEAAgE;QAChE,QAAQ,GAAG,CAAC,iCAAiC,MAAM,SAAS,CAAC,GAAG,MAAM;QAEtE,IAAI,WAAW,EAAE;QAEjB,mDAAmD;QACnD,MAAM,aAAa,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,aAAa;YACtD,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QAEA,MAAM,cAAc,WAAW,IAAI;QACnC,QAAQ,GAAG,CAAC,sBAAsB,YAAY,IAAI;QAElD,0DAA0D;QAC1D,IAAI;YAAC;YAAS;YAAU;YAAgB;SAAa,CAAC,QAAQ,CAAC,YAAY,IAAI,GAAG;YAChF,QAAQ,GAAG,CAAC,AAAC,GAAmB,OAAjB,YAAY,IAAI,EAAC;YAChC,IAAI;gBACF,8CAA8C;gBAC9C,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,mBAAmB;oBAC1D,SAAS;wBACP,eAAe,AAAC,UAAe,OAAN;oBAC3B;gBACF;gBAEA,WAAW,SAAS,IAAI;gBACxB,QAAQ,GAAG,CAAC,AAAC,wBAAuC,OAAhB,SAAS,MAAM,EAAC;gBACpD,OAAO;YACT,EAAE,OAAO,OAAY;gBACnB,QAAQ,KAAK,CAAC,AAAC,+BAA+C,OAAjB,YAAY,IAAI,EAAC,MAAI;gBAElE,+DAA+D;gBAC/D,IAAI,MAAM,QAAQ,IAAI,MAAM,QAAQ,CAAC,MAAM,KAAK,KAAK;oBACnD,QAAQ,IAAI,CAAC;gBACf,OAAO;oBACL,MAAM,OAAO,qCAAqC;gBACpD;YACF;QACF;QAEA,4EAA4E;QAC5E,IAAI,YAAY,IAAI,KAAK,SAAS;YAChC,QAAQ,GAAG,CAAC;YACZ,IAAI;gBACF,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,UAAU;oBACjD,SAAS;wBACP,eAAe,AAAC,UAAe,OAAN;oBAC3B;gBACF;gBAEA,WAAW,SAAS,IAAI,CAAC,MAAM,CAAC,CAAC,OAAc,KAAK,IAAI,KAAK;gBAC7D,QAAQ,GAAG,CAAC,AAAC,wBAAuC,OAAhB,SAAS,MAAM,EAAC;gBACpD,OAAO;YACT,EAAE,OAAO,OAAY;gBACnB,QAAQ,KAAK,CAAC,sCAAsC;gBACpD,MAAM;YACR;QACF,OAAO;YACL,kDAAkD;YAClD,QAAQ,IAAI,CAAC,AAAC,aAA6B,OAAjB,YAAY,IAAI,EAAC;YAC3C,MAAM,IAAI,MAAM,AAAC,6BAA6C,OAAjB,YAAY,IAAI,EAAC;QAChE;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,qCAAqC,MAAM,OAAO;QAEhE,oCAAoC;QACpC,IAAI,MAAM,QAAQ,EAAE;YAClB,QAAQ,KAAK,CAAC,oBAAoB,MAAM,QAAQ,CAAC,MAAM;YACvD,QAAQ,KAAK,CAAC,kBAAkB,MAAM,QAAQ,CAAC,IAAI;QACrD;QAEA,MAAM;IACR;AACF;AAGO,MAAM,gBAAgB,OAAO;IAClC,QAAQ,GAAG,CAAC,sCAAsC,MAAM,SAAS,CAAC,GAAG,MAAM;IAC3E,IAAI;QACF,8DAA8D;QAC9D,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,yBAAyB;YAChE,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QACA,QAAQ,GAAG,CAAC,2CAA2C,SAAS,IAAI;QAEpE,uCAAuC;QACvC,IAAI;gBAM+C;YALjD,MAAM,aAAa,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,aAAa;gBACtD,SAAS;oBACP,eAAe,AAAC,UAAe,OAAN;gBAC3B;YACF;YACA,QAAQ,GAAG,CAAC,sCAAqC,mBAAA,WAAW,IAAI,cAAf,uCAAA,iBAAiB,IAAI;YACtE,OAAO;gBAAE,OAAO;gBAAM,MAAM,WAAW,IAAI,IAAI,SAAS,IAAI;YAAC;QAC/D,EAAE,OAAO,SAAS;YAChB,QAAQ,KAAK,CAAC,uCAAuC;YACrD,OAAO;gBAAE,OAAO;gBAAM,MAAM,SAAS,IAAI;YAAC;QAC5C;IACF,EAAE,OAAO,OAAY;YAEqB,iBACF;QAFtC,QAAQ,KAAK,CAAC,2BAA2B;QACzC,QAAQ,KAAK,CAAC,2BAA0B,kBAAA,MAAM,QAAQ,cAAd,sCAAA,gBAAgB,MAAM;QAC9D,QAAQ,KAAK,CAAC,yBAAwB,mBAAA,MAAM,QAAQ,cAAd,uCAAA,iBAAgB,IAAI;QAE1D,IAAI,MAAM,QAAQ,IAAI,MAAM,QAAQ,CAAC,MAAM,KAAK,KAAK;YACnD,qCAAqC;YACrC,OAAO;gBAAE,OAAO;gBAAO,QAAQ;YAAU;QAC3C,OAAO,IAAI,MAAM,QAAQ,IAAI,MAAM,QAAQ,CAAC,MAAM,KAAK,KAAK;YAC1D,oCAAoC;YACpC,OAAO;gBAAE,OAAO;gBAAM,QAAQ;YAA2B;QAC3D;QAEA,OAAO;YAAE,OAAO;YAAO,QAAQ;YAAW;QAAM;IAClD;AACF;AAGO,MAAM,YAAY,OAAO;IAC9B,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,WAAW;QAClD,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,oBAAoB,OAAO,OAAe;IACrD,MAAM,MAAM,SAAS,AAAC,yBAA+B,OAAP,UAAW;IACzD,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,KAAK;QAC5C,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,wBAAwB,OAAO;IAC1C,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,yBAAyB;QAChE,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,oBAAoB,OAAO,QAAgB;IACtD,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,kBAAwB,OAAP,SAAU;QACnE,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,cAAc,OAAO,WAAmB,OAAe;IAClE,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,IAAI,CAAC,WACxC;QACE;QACA,QAAQ;QACR;IACF,GACA;QACE,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IAEF,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,oBAAoB,OAAO,SAAiB,OAAe,QAAgB,UAAmB;IACzG,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,WAAkB,OAAR,UAClD;QACE;QACA;QACA;IACF,GACA;QACE,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IAEF,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,cAAc,OAAO,SAAiB;IACjD,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,MAAM,CAAC,AAAC,WAAkB,OAAR,UAAW;QAChE,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,oBAAoB,OAAO,SAAiB;IACvD,IAAI;QACF,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,WAAkB,OAAR,SAAQ,oBAC1D,CAAC,GACD;YACE,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QAEF,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,kCAAkC;QAEhD,oCAAoC;QACpC,IAAI,MAAM,QAAQ,EAAE;YAClB,QAAQ,KAAK,CAAC,oBAAoB,MAAM,QAAQ,CAAC,MAAM;YACvD,QAAQ,KAAK,CAAC,kBAAkB,MAAM,QAAQ,CAAC,IAAI;QACrD;QAEA,MAAM;IACR;AACF;AAGO,MAAM,aAAa,OAAO;IAC/B,IAAI;QACF,uCAAuC;QACvC,IAAI,CAAC,OAAO;YACV,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,gEAAgE;QAChE,QAAQ,GAAG,CAAC,iCAAiC,MAAM,SAAS,CAAC,GAAG,MAAM;QAEtE,0CAA0C;QAC1C,QAAQ,GAAG,CAAC;QACZ,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,kBAAkB;YACzD,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QAEA,QAAQ,GAAG,CAAC,AAAC,wBAA4C,OAArB,SAAS,IAAI,CAAC,MAAM,EAAC;QACzD,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,oCAAoC,MAAM,OAAO;QAE/D,oCAAoC;QACpC,IAAI,MAAM,QAAQ,EAAE;YAClB,QAAQ,KAAK,CAAC,oBAAoB,MAAM,QAAQ,CAAC,MAAM;YACvD,QAAQ,KAAK,CAAC,kBAAkB,MAAM,QAAQ,CAAC,IAAI;QACrD;QAEA,kEAAkE;QAClE,IAAI,MAAM,QAAQ,IAAI,MAAM,QAAQ,CAAC,MAAM,KAAK,KAAK;YACnD,QAAQ,IAAI,CAAC;YACb,IAAI;gBACF,oCAAoC;gBACpC,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,UAAU;oBACjD,SAAS;wBACP,eAAe,AAAC,UAAe,OAAN;oBAC3B;gBACF;gBAEA,MAAM,UAAU,SAAS,IAAI,CAAC,MAAM,CAAC,CAAC,OAAc,KAAK,IAAI,KAAK;gBAClE,QAAQ,GAAG,CAAC,AAAC,wBAAsC,OAAf,QAAQ,MAAM,EAAC;gBACnD,OAAO;YACT,EAAE,OAAO,eAAoB;gBAC3B,QAAQ,KAAK,CAAC,kDAAkD;gBAChE,MAAM;YACR;QACF;QAEA,MAAM;IACR;AACF;AAGO,MAAM,qBAAqB,OAAO,kBAAuB;IAC9D,QAAQ,GAAG,CAAC,2CAA2C,KAAK,SAAS,CAAC,kBAAkB,MAAM;IAC9F,IAAI;QACF,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,IAAI,CAAC,kBAAkB,kBAAkB;YAC5E,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QACA,QAAQ,GAAG,CAAC,6CAA6C,SAAS,IAAI;QACtE,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAY;YACoC;QAAvD,QAAQ,KAAK,CAAC,yCAAyC,EAAA,kBAAA,MAAM,QAAQ,cAAd,sCAAA,gBAAgB,IAAI,KAAI,MAAM,OAAO;QAC5F,MAAM;IACR;AACF;AAEO,MAAM,mBAAmB;QAAO,+EAA0E,CAAC,GAAG;IACnH,QAAQ,GAAG,CAAC,2CAA2C;IACvD,QAAQ,GAAG,CAAC,iCAAiC,MAAM,SAAS,CAAC,GAAG,MAAM;IACtE,IAAI;QACF,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,kBAAkB;YACzD,QAAQ;YACR,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QACA,QAAQ,GAAG,CAAC,AAAC,uBAA2C,OAArB,SAAS,IAAI,CAAC,MAAM,EAAC;QACxD,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAY;YACkC,iBACb,kBACC;QAFzC,QAAQ,KAAK,CAAC,uCAAuC,EAAA,kBAAA,MAAM,QAAQ,cAAd,sCAAA,gBAAgB,IAAI,KAAI,MAAM,OAAO;QAC1F,QAAQ,KAAK,CAAC,2BAA0B,mBAAA,MAAM,QAAQ,cAAd,uCAAA,iBAAgB,MAAM;QAC9D,QAAQ,KAAK,CAAC,4BAA2B,mBAAA,MAAM,QAAQ,cAAd,uCAAA,iBAAgB,OAAO;QAChE,MAAM;IACR;AACF;AAGO,MAAM,kCAAkC,OAAO;IACpD,OAAO,iBAAiB;QAAE,QAAQ;IAAmB,GAAG;AAC1D;AAEO,MAAM,sBAAsB,OAAO,gBAAwB;IAChE,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,kBAAgC,OAAf,iBAAkB;QAC3E,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,2BAA2B,OAAO,gBAAwB,QAAgB;IACrF,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,kBAAgC,OAAf,iBAAkB;QAAE;IAAO,GAAG;QACvF,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,2BAA2B,OAAO,wBAA6B;IAC1E,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,IAAI,CAAC,wBAAwB,wBAAwB;QACxF,SAAS;YACP,eAAe,AAAC,UAAe,OAAN;QAC3B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,iCAAiC,OAAO,gBAAwB,SAAgB;IAC3F,QAAQ,GAAG,CAAC,uDAAuD;QACjE;QACA,SAAS,KAAK,SAAS,CAAC,SAAS,MAAM;IACzC;IACA,IAAI;QACF,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,IAAI,CAAC,8BAA8B;YACtE;YACA;QACF,GAAG;YACD,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QACA,QAAQ,GAAG,CAAC,yDAAyD,SAAS,IAAI;QAClF,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAY;YACgD;QAAnE,QAAQ,KAAK,CAAC,qDAAqD,EAAA,kBAAA,MAAM,QAAQ,cAAd,sCAAA,gBAAgB,IAAI,KAAI,MAAM,OAAO;QACxG,MAAM;IACR;AACF;AAEO,MAAM,yBAAyB,OAAO,gBAAwB;IACnE,QAAQ,GAAG,CAAC,AAAC,wDAAsE,OAAf;IACpE,QAAQ,GAAG,CAAC,iCAAiC,MAAM,SAAS,CAAC,GAAG,MAAM;IACtE,IAAI;QACF,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,wBAAwB;YAC/D,QAAQ;gBAAE;YAAe;YACzB,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QACA,QAAQ,GAAG,CAAC,AAAC,uBAA2C,OAArB,SAAS,IAAI,CAAC,MAAM,EAAC;QACxD,IAAI,SAAS,IAAI,CAAC,MAAM,GAAG,GAAG;YAC5B,QAAQ,GAAG,CAAC,qCAAqC;gBAC/C,IAAI,SAAS,IAAI,CAAC,EAAE,CAAC,GAAG;gBACxB,gBAAgB,SAAS,IAAI,CAAC,EAAE,CAAC,cAAc;gBAC/C,YAAY,SAAS,IAAI,CAAC,EAAE,CAAC,UAAU;gBACvC,UAAU,SAAS,IAAI,CAAC,EAAE,CAAC,QAAQ;gBACnC,QAAQ,SAAS,IAAI,CAAC,EAAE,CAAC,MAAM;YACjC;QACF;QACA,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAY;YACwC,iBACnB,kBACC;QAFzC,QAAQ,KAAK,CAAC,6CAA6C,EAAA,kBAAA,MAAM,QAAQ,cAAd,sCAAA,gBAAgB,IAAI,KAAI,MAAM,OAAO;QAChG,QAAQ,KAAK,CAAC,2BAA0B,mBAAA,MAAM,QAAQ,cAAd,uCAAA,iBAAgB,MAAM;QAC9D,QAAQ,KAAK,CAAC,4BAA2B,mBAAA,MAAM,QAAQ,cAAd,uCAAA,iBAAgB,OAAO;QAChE,MAAM;IACR;AACF;AAGO,MAAM,sBAAsB,OAAO,YAAoB,UAAkB;IAC9E,QAAQ,GAAG,CAAC,AAAC,uBAA0D,OAApC,UAAS,6BAAsC,OAAX;IACvE,IAAI;QACF,4CAA4C;QAC5C,MAAM,WAAW,MAAM,gBAAgB,YAAY;QAEnD,IAAI,CAAC,UAAU;YACb,MAAM,IAAI,MAAM,AAAC,oBAA8B,OAAX,YAAW;QACjD;QAEA,2BAA2B;QAC3B,IAAI,SAAS,UAAU,GAAG,UAAU;YAClC,QAAQ,IAAI,CAAC,AAAC,iCAA2D,OAA3B,UAAS,oBAAsC,OAApB,SAAS,UAAU,EAAC;QAC7F,0DAA0D;QAC5D;QAEA,yBAAyB;QACzB,MAAM,cAAc,KAAK,GAAG,CAAC,GAAG,SAAS,UAAU,GAAG;QAEtD,0BAA0B;QAC1B,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,cAAwB,OAAX,aACrD;YAAE,YAAY;QAAY,GAC1B;YACE,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QAGF,QAAQ,GAAG,CAAC,AAAC,iCAAgE,OAAhC,SAAS,IAAI,EAAC,oBAA8B,OAAZ;QAC7E,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAY;YACqC;QAAxD,QAAQ,KAAK,CAAC,0CAA0C,EAAA,kBAAA,MAAM,QAAQ,cAAd,sCAAA,gBAAgB,IAAI,KAAI,MAAM,OAAO;QAC7F,MAAM;IACR;AACF;AAGO,MAAM,mBAAmB,OAAO,OAAe,WAAoB;IACxE,QAAQ,GAAG,CAAC,AAAC,mCAAgE,OAA9B,aAAa,YAAW,QAAuB,OAAjB,WAAW;IACxF,IAAI;QACF,MAAM,SAAc;YAAE,QAAQ;QAAY;QAE1C,IAAI,WAAW,OAAO,SAAS,GAAG;QAClC,IAAI,SAAS,OAAO,OAAO,GAAG;QAE9B,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,0BAA0B;YACjE;YACA,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QAEA,QAAQ,GAAG,CAAE;QACb,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAY;YACkC,iBACb;QADxC,QAAQ,KAAK,CAAE,uCAAsC,EAAA,kBAAA,MAAM,QAAQ,cAAd,sCAAA,gBAAgB,IAAI,KAAI,MAAM,OAAO;QAC1F,QAAQ,KAAK,CAAC,2BAA0B,mBAAA,MAAM,QAAQ,cAAd,uCAAA,iBAAgB,MAAM;QAC9D,MAAM;IACR;AACF;AAGO,MAAM,yBAAyB,OAAO,OAAe;IAC1D,QAAQ,GAAG,CAAC,AAAC,8CAAkD,OAAL;IAC1D,IAAI;QACF,MAAM,YAAY,AAAC,GAAO,OAAL,MAAK;QAC1B,MAAM,UAAU,AAAC,GAAO,OAAL,MAAK;QAExB,MAAM,WAAW,MAAM,iBAAiB,OAAO,WAAW;QAC1D,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,AAAC,qDAAyD,OAAL,MAAK,MAAI;QAC5E,MAAM;IACR;AACF;AAGO,MAAM,+BAA+B,OAAO,gBAAwB;IACzE,QAAQ,GAAG,CAAC,AAAC,kDAAgE,OAAf;IAC9D,IAAI;QACF,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,AAAC,kBAAgC,OAAf,gBAAe,aAAW;YACnF,SAAS;gBACP,eAAe,AAAC,UAAe,OAAN;YAC3B;QACF;QAEA,QAAQ,GAAG,CAAE;QACb,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAY;YACuE,iBAClD;QADxC,QAAQ,KAAK,CAAC,AAAC,yDAAuE,OAAf,gBAAe,MAAI,EAAA,kBAAA,MAAM,QAAQ,cAAd,sCAAA,gBAAgB,IAAI,KAAI,MAAM,OAAO;QAC/H,QAAQ,KAAK,CAAC,2BAA0B,mBAAA,MAAM,QAAQ,cAAd,uCAAA,iBAAgB,MAAM;QAC9D,MAAM;IACR;AACF;AAEO,MAAM,aAAa,OAAO,IAAY;IAC3C,QAAQ,GAAG,CAAC,AAAC,yDAA2D,OAAH;IACrE,IAAI;QACF,+DAA+D;QAC/D,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,MAAM,CAAC,AAAC,UAAY,OAAH,KAAM;YAC1D,SAAS;gBACP,iEAAiE;gBACjE,eAAe,AAAC,UAAmB,OAAV;YAC3B;QACF;QAEA,6EAA6E;QAC7E,OAAO,SAAS,IAAI;IACtB,EAAE,OAAO,OAAO;QACd,wEAAwE;QACxE,QAAQ,KAAK,CAAC,AAAC,uDAAyD,OAAH,IAAG,MAAI;QAC5E,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 708, "column": 0}, "map": {"version":3,"sources":["file:///D:/%C4%90%E1%BB%93%20%C3%A1n%20A/hospitality-website-main/hospitality-website-main/my-app/src/app/context/AuthContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { User, UserRole } from '../datats/auth';\nimport Cookies from 'js-cookie';\nimport { login as apiLogin, validateToken } from '../services/api.service';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  token: string | null;  // Added token property\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<boolean>; // Thêm hàm refresh token\n  validateCurrentToken: () => Promise<boolean>; // Thêm hàm kiểm tra token hiện tại\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [token, setToken] = useState<string | null>(null); // Added token state\n\n  useEffect(() => {\n    // Check for existing session\n    const storedUser = Cookies.get('user');\n    const storedToken = Cookies.get('token'); // Get stored token\n    \n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        Cookies.remove('user');\n      }\n    }\n    \n    // Set token from cookie if available\n    if (storedToken) {\n      setToken(storedToken);\n    }\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      console.log('AuthContext - Login attempt:', email);\n      const data = await apiLogin(email, password);\n      console.log('AuthContext - Login response data:', data);\n      \n      // Tách token và thông tin người dùng\n      const { token: authToken, ...userData } = data;\n      \n      // Đảm bảo role là chuỗi và được lưu dưới dạng chữ hoa để nhất quán\n      if (userData.role) {\n        console.log('AuthContext - Original role:', userData.role);\n        const normalizedRole = typeof userData.role === 'string' \n          ? userData.role.toUpperCase() \n          : userData.role;\n        \n        userData.role = normalizedRole;\n        console.log('AuthContext - Normalized role:', userData.role);\n      }\n      \n      setUser(userData);\n      setIsAuthenticated(true);\n      setToken(authToken); // Save token to state\n\n      console.log('AuthContext - Setting user cookie with data:', userData);\n      // Lưu thông tin người dùng và token vào cookie riêng biệt\n      Cookies.set('user', JSON.stringify(userData), { expires: 1 });\n      if (authToken) {\n        Cookies.set('token', authToken, { expires: 1 });\n      }\n    } catch (error) {\n      console.error('AuthContext - Login error:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    setToken(null); // Clear token\n    // Xóa cả hai cookie khi đăng xuất\n    Cookies.remove('user');\n    Cookies.remove('token');\n  };\n\n  // Hàm để làm mới token khi token hiện tại không hợp lệ\n  const refreshToken = async () => {\n    console.log('AuthContext - Attempting to refresh token');\n    // Trong triển khai thực tế, bạn sẽ gọi endpoint refresh-token của API\n    // Hiện tại chúng ta chỉ kiểm tra nếu user object còn tồn tại\n    \n    if (user && user.email) {\n      try {\n        // Giả lập request refresh token bằng cách đăng nhập lại\n        // Trong thực tế sẽ là gọi API refresh-token\n        console.log('Would call refresh token API here with existing user:', user.email);\n        return true;\n      } catch (error) {\n        console.error('AuthContext - Token refresh error:', error);\n        // Đăng xuất người dùng nếu không thể làm mới token\n        logout();\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const validateCurrentToken = async () => {\n    const storedToken = Cookies.get('token');\n    if (!storedToken) {\n      setIsAuthenticated(false);\n      return false;\n    }\n\n    try {\n      const tokenStatus = await validateToken(storedToken);\n      const isValid = tokenStatus.valid;\n      setIsAuthenticated(isValid);\n      return isValid;\n    } catch (error) {\n      console.error('AuthContext - Token validation error:', error);\n      setIsAuthenticated(false);\n      return false;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isAuthenticated, token, login, logout, refreshToken, validateCurrentToken }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}"],"names":[],"mappings":"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","debugId":null}}]
}