{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  const isAuthenticated = request.cookies.has('user'); \n  const isAuthPage = request.nextUrl.pathname === '/login';\n  const isDashboardRoute = request.nextUrl.pathname.startsWith('/dashboard-doctor');\n  const isPharmacyRoute = request.nextUrl.pathname.startsWith('/pharmacyPage');\n  const isReceptionistRoute = request.nextUrl.pathname.startsWith('/receptionistPage');\n\n  // Log current path and authentication status for debugging\n  console.log('Current path:', request.nextUrl.pathname);\n  console.log('Is authenticated:', isAuthenticated);\n\n  // Nếu đã đăng nhập và cố truy cập trang login, chuyển hướng về trang phù hợp\n  if (isAuthenticated && isAuthPage) {\n    // Lấy thông tin user từ cookie để xác định vai trò\n    const userCookie = request.cookies.get('user');\n    const user = userCookie ? JSON.parse(userCookie.value) : null;\n    \n    // Log user data for debugging\n    console.log('User cookie value:', JSON.stringify(user));\n    console.log('User role (raw):', user?.role);\n    \n    // Sử dụng cách tiếp cận an toàn với kiểm tra rõ ràng hơn\n    let userRole = '';\n    if (user && typeof user.role === 'string') {\n      userRole = user.role.toUpperCase();\n      console.log('User role (uppercase):', userRole);\n    }\n    \n    // Kiểm tra vai trò và chuyển hướng tương ứng\n    if (userRole === 'PHARMACIST') {\n      console.log('Redirecting to pharmacy page');\n      return NextResponse.redirect(new URL('/pharmacyPage', request.url));\n    } else if (userRole === 'RECEPTIONIST') {\n      console.log('Redirecting to receptionist page');\n      return NextResponse.redirect(new URL('/receptionistPage', request.url));\n    } else if (userRole === 'PATIENT') {\n      console.log('Redirecting to home page for patient');\n      return NextResponse.redirect(new URL('/', request.url));\n    } else if (userRole === 'DOCTOR') {\n      console.log('Redirecting to doctor dashboard');\n      return NextResponse.redirect(new URL('/dashboard-doctor', request.url));\n    } else {\n      console.log('No specific role matched, using fallback redirect to home');\n      // Fallback for any other roles or if role is not defined\n      return NextResponse.redirect(new URL('/', request.url));\n    }\n  }\n\n  // Nếu chưa đăng nhập và cố truy cập các trang được bảo vệ\n  if (!isAuthenticated && (isDashboardRoute || isPharmacyRoute || isReceptionistRoute)) {\n    console.log('Unauthorized access attempt, redirecting to login');\n    return NextResponse.redirect(new URL('/login', request.url));\n  }\n  \n  // Nếu đã đăng nhập, kiểm tra xem có truy cập đúng route dựa theo vai trò hay không\n  if (isAuthenticated && (isDashboardRoute || isPharmacyRoute || isReceptionistRoute)) {\n    const userCookie = request.cookies.get('user');\n    const user = userCookie ? JSON.parse(userCookie.value) : null;\n    \n    if (user) {\n      const userRole = typeof user.role === 'string' ? user.role.toUpperCase() : '';\n      console.log('Authenticated user accessing protected route:', request.nextUrl.pathname);\n      console.log('User role for route check:', userRole);\n      \n      // Kiểm tra quyền truy cập route\n      const isDoctorAccessing = isDashboardRoute && userRole !== 'DOCTOR';\n      const isPharmacistAccessing = isPharmacyRoute && userRole !== 'PHARMACIST';\n      const isReceptionistAccessing = isReceptionistRoute && userRole !== 'RECEPTIONIST';\n      \n      // Nếu truy cập sai route theo vai trò, chuyển hướng về trang phù hợp\n      if (isDoctorAccessing || isPharmacistAccessing || isReceptionistAccessing) {\n        console.log('User attempting to access unauthorized route, redirecting to appropriate page');\n        \n        if (userRole === 'DOCTOR') {\n          return NextResponse.redirect(new URL('/dashboard-doctor', request.url));\n        } else if (userRole === 'PHARMACIST') {\n          return NextResponse.redirect(new URL('/pharmacyPage', request.url));\n        } else if (userRole === 'RECEPTIONIST') {\n          return NextResponse.redirect(new URL('/receptionistPage', request.url));\n        } else if (userRole === 'PATIENT') {\n          return NextResponse.redirect(new URL('/', request.url));\n        } else {\n          return NextResponse.redirect(new URL('/', request.url));\n        }\n      }\n    }\n  }\n\n  console.log('Proceeding with the request');\n  return NextResponse.next();\n}\n\n// Cập nhật matcher để bao gồm cả route receptionistPage\nexport const config = {\n  matcher: ['/login', '/dashboard-doctor/:path*', '/pharmacyPage/:path*', '/receptionistPage/:path*'],\n};"],"names":[],"mappings":"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"}}]
}